{"version":3,"file":"static/webpack/1.c23fcd87003d59523079.hot-update.js","sources":["webpack:///./src/components/inputscreen-components/simulator/simulatorComponents/headline.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd'\nimport { updateSimulatorSelection, updateInputScreenUi} from '../../../../redux/actions/uiActions'\nimport { setSelectedComponent } from '../../../../redux/actions/dataActions'\nimport { addOrUpdateHeadline, emptySelectedComponent } from '../../../../redux/actions/dataActions'\nimport TextareaAutosize from 'react-autosize-textarea';\n\n\n\nclass Headline extends React.Component<{component:any, index:any,uiState:any,dataState:any, addOrUpdateHeadline:Function, updateSimulatorSelection:Function, setSelectedComponent:Function, updateInputScreenUi:Function}> {\n    handleSelection = () => {\n        let selectedComponentId = this.props.component.id\n        if(this.props.component.id != this.props.uiState.simulator.selected){\n        this.props.updateSimulatorSelection({selectedComponentId})\n        this.props.setSelectedComponent({selectedComponentId})\n        this.props.updateInputScreenUi(\"HEADLINE_INPUT\")\n        } elseÂ {\n        selectedComponentId = \"empty\"\n        this.props.updateSimulatorSelection({selectedComponentId})\n        this.props.setSelectedComponent({selectedComponentId})\n        this.props.updateInputScreenUi(\"MENU\")\n        }\n    }\n    handleKeyDown(e) {\n        e.target.style.height = 'inherit';\n        e.target.style.height = `${e.target.scrollHeight}px`; \n        // In case you have a limitation\n        // e.target.style.height = `${Math.min(e.target.scrollHeight, limit)}px`;\n      }\n    \n\n    handleHeadline = (e) => {\n        const type = this.props.uiState.menu.htype\n        const headline = e.target.value\n        const selectedHtypeId = this.props.dataState.selectedHtypeId\n        const selectedComponentId = this.props.dataState.selectedComponentId\n        const  dispatch = \"UPDATE_HEADLINE\"\n        this.props.addOrUpdateHeadline({ type, headline, selectedHtypeId, dispatch, selectedComponentId })\n\n\n    }\n\n    render() {\n        return (<Draggable draggableId={this.props.component.id} index={this.props.index}>\n        {provided =>( \n        <Container\n            key = {this.props.component.id}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            onClick={this.handleSelection}\n            datatype={this.props.component.id == this.props.uiState.simulator.selected ? \"-0.2vh\":\"0\" }\n            property={this.props.component.id == this.props.uiState.simulator.selected ? \"dashed\":\"none\" }\n            >\n            <HeadlineText value={this.props.component.headline} onChange={ (e) => this.handleHeadline(e)} ></HeadlineText>\n        </Container>\n        )\n        }\n    </Draggable>)\n    }\n}\n\nconst mapStateToProps = state => {\n    return { uiState: state.ui, dataState: state.data };\n};\n\n\nconst Container = styled.div`\n    height:auto;\n    width:98%;\n    outline: 0px solid transparent;\n    word-wrap: break-word;\n    padding:1%;\n    border: ${props => props.property} 0.2vh;\n    margin: ${props => props.datatype};\n    border-radius:2.5vh;\n`\n\nconst  HeadlineText = styled(TextareaAutosize)`\n    font-weight: lighter;\n    height: 94%;\n    width: 90%;\n    font-size:3vh;\n    margin:0;\n    padding:0.5vh;\n    text-align:center;\n    resize:none;\n    -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n    -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n    box-sizing: border-box;\n    align-self:center;\n    border:0;\n    display:flex;\n    :focus {\n        outline:none;\n        caret-color:salmon;\n    }\n`\n\nconst HeadlineText2 = styled.textarea`\n    font-weight: lighter;\n    height: 94%;\n    width: 90%;\n    font-size:3vh;\n    margin:0;\n    padding:0.5vh;\n    text-align:center;\n    resize:none;\n    -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n    -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n    box-sizing: border-box;\n    align-self:center;\n    border:0;\n    display:flex;\n    :focus {\n        outline:none;\n        caret-color:salmon;\n    }\n`\n\nexport default connect(mapStateToProps,{updateSimulatorSelection, setSelectedComponent, updateInputScreenUi,addOrUpdateHeadline})(Headline);\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AAlBA;AACA;AACA;AAEA;AACA;;;AAcA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAeA;;;;AAlDA;AACA;AAoDA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}