{"version":3,"file":"0.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/from.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js","webpack:///./src/components/inputscreen-components/simulator/simulator.tsx","webpack:///./src/components/inputscreen-components/simulator/simulatorComponents/headline.tsx"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/object/assign\");","import _Object$assign from \"../../core-js/object/assign\";\nexport default function _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import styled from 'styled-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport HeadlineText from './simulatorComponents/headline'\nimport {updateComponentsOrder} from '../../../redux/actions/dataActions'\n\n\n\nclass Simulator extends React.Component<{dataState:any,uiState:any, updateComponentsOrder:any}> {\n\n    componentCreator = () => {\n        return this.props.dataState[this.props.uiState.simulator.show][this.props.dataState.selectedHtypeId] != undefined?\n        this.props.dataState[this.props.uiState.simulator.show][this.props.dataState.selectedHtypeId].order.map((id,index) =>{\n             let component =  this.props.dataState[this.props.uiState.simulator.show][this.props.dataState.selectedHtypeId].components[id];\n             switch (component.type) {\n                case (\"HEADLINE\"): {\n                    return <HeadlineText key={component.id} component={component} index={index}></HeadlineText>\n                }\n                default:\n                    return<div></div>\n            }\n\n\n        }): [1].map((index) => <div key={index}></div>)\n        \n    }\n\n    onDragEnd = result =>{\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId == source.droppableId &&\n            destination.index == source.index) {\n            return;\n        }\n        const newOrder = Array.from(this.props.dataState[this.props.uiState.simulator.show][this.props.dataState.selectedHtypeId].order)\n        const htype = this.props.uiState.simulator.show\n        const htypeId = this.props.dataState.selectedHtypeId\n       // const columnId = source.droppableId;\n        //const column = this.props.uiState.columns[source.droppableId]\n        //const newOrder = Array.from(column.ids);\n\n        newOrder.splice(source.index, 1);\n        newOrder.splice(destination.index, 0, draggableId);\n        console.log(newOrder)\n        this.props.updateComponentsOrder({ newOrder,htype,htypeId  })\n    }\n\n    render() {\n        return <BackgroundWrapper>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable droppableId=\"simulator\">\n                {provided => (\n                <FilledSimulator\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                >{this.componentCreator()}\n                    {provided.placeholder}\n                </FilledSimulator>\n\n                )}\n                </Droppable>\n                 </DragDropContext>\n            \n        </BackgroundWrapper>\n    }\n}\n\nconst mapStateToProps = state => {\n    return { uiState: state.ui, dataState: state.data };\n};\n\nexport default connect(mapStateToProps,{updateComponentsOrder})(Simulator);\n\n\n/*\nfunction Simulator() {\n    return (\n        <BackgroundWrapper>\n            <ForegroundWrapper>\n              <Image src=\"mountains.png\"></Image>\n            </ForegroundWrapper>\n        </BackgroundWrapper>\n    )\n}\n\nexport default Simulator\n*/\nconst BackgroundWrapper = styled.div`\n  width: 50vw;\n  height: 100vh;\n  display:flex;\n  background:white;\n  align-content:center;\n  justify-content:center;\n`;\n\nconst FilledSimulator = styled.div`\n  width:40vh;\n  height: 84vh;\n  align-self:center;\n  display:flex;\n  border-style:solid;\n  border-radius: 1.5em;\n  border-color:lightgrey;\n  border-width:0.05em;\n  flex-direction:column;\n`\n\nconst Image = styled.img`\n  border-radius:1.5em;\n  max-width:100%;\n  max-height:30%;\n  height:auto;\n  width:auto;\n  display: block;\n  object-fit: cover;\n  overflow: hidden;\n\n\n`","import styled from 'styled-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd'\nimport { updateSimulatorSelection, updateInputScreenUi} from '../../../../redux/actions/uiActions'\nimport { setSelectedComponent } from '../../../../redux/actions/dataActions'\nimport { addOrUpdateHeadline, emptySelectedComponent } from '../../../../redux/actions/dataActions'\nimport TextareaAutosize from 'react-autosize-textarea';\n\n\n\nclass Headline extends React.Component<{component:any, index:any,uiState:any,dataState:any, addOrUpdateHeadline:Function, updateSimulatorSelection:Function, setSelectedComponent:Function, updateInputScreenUi:Function}> {\n    handleSelection = () => {\n        let selectedComponentId = this.props.component.id\n        if(this.props.component.id != this.props.uiState.simulator.selected){\n        this.props.updateSimulatorSelection({selectedComponentId})\n        this.props.setSelectedComponent({selectedComponentId})\n        this.props.updateInputScreenUi(\"HEADLINE_INPUT\")\n        } elseÂ {\n        selectedComponentId = \"empty\"\n        this.props.updateSimulatorSelection({selectedComponentId})\n        this.props.setSelectedComponent({selectedComponentId})\n        this.props.updateInputScreenUi(\"MENU\")\n        }\n    }\n    handleKeyDown(e) {\n        e.target.style.height = 'inherit';\n        e.target.style.height = `${e.target.scrollHeight}px`; \n        // In case you have a limitation\n        // e.target.style.height = `${Math.min(e.target.scrollHeight, limit)}px`;\n      }\n    \n\n    handleHeadline = (e) => {\n        const type = this.props.uiState.menu.htype\n        const headline = e.target.value\n        const selectedHtypeId = this.props.dataState.selectedHtypeId\n        const selectedComponentId = this.props.dataState.selectedComponentId\n        const  dispatch = \"UPDATE_HEADLINE\"\n        this.props.addOrUpdateHeadline({ type, headline, selectedHtypeId, dispatch, selectedComponentId })\n\n\n    }\n\n    render() {\n        return (<Draggable draggableId={this.props.component.id} index={this.props.index}>\n        {provided =>( \n        <Container\n            key = {this.props.component.id}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            onClick={this.handleSelection}\n            datatype={this.props.component.id == this.props.uiState.simulator.selected ? \"-0.2vh\":\"0\" }\n            property={this.props.component.id == this.props.uiState.simulator.selected ? \"dashed\":\"none\" }\n            >\n            <HeadlineText value={this.props.component.headline} onChange={ (e) => this.handleHeadline(e)} ></HeadlineText>\n        </Container>\n        )\n        }\n    </Draggable>)\n    }\n}\n\nconst mapStateToProps = state => {\n    return { uiState: state.ui, dataState: state.data };\n};\n\n\nconst Container = styled.div`\n    height:auto;\n    width:98%;\n    outline: 0px solid transparent;\n    word-wrap: break-word;\n    padding:1%;\n    border: ${props => props.property} 0.2vh;\n    margin: ${props => props.datatype};\n    border-radius:2.5vh;\n    display:flex;\n    align-content:center;\n`\n\nconst  HeadlineText = styled(TextareaAutosize)`\n    font-weight: lighter;\n    position:relative;\n    user-select: none;\n    left:2%;\n    height: 94%;\n    width: 96%;\n    font-size:3vh;\n    margin:0.1vh;\n    padding:0.5vh;\n    text-align:center;\n    resize:none;\n    -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n    -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n    box-sizing: border-box;\n    align-self:center;\n    border:0;\n    display:flex;\n    :focus {\n        outline:none;\n        caret-color:salmon;\n    }\n`\n\nconst HeadlineText2 = styled.textarea`\n    font-weight: lighter;\n    height: 94%;\n    width: 90%;\n    font-size:3vh;\n    margin:0;\n    padding:0.5vh;\n    text-align:center;\n    resize:none;\n    -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n    -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n    box-sizing: border-box;\n    align-self:center;\n    border:0;\n    display:flex;\n    :focus {\n        outline:none;\n        caret-color:salmon;\n    }\n`\n\nexport default connect(mapStateToProps,{updateSimulatorSelection, setSelectedComponent, updateInputScreenUi,addOrUpdateHeadline})(Headline);\n\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAlBA;AAoBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAxCA;AACA;AAyCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA5DA;AACA;AA6DA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AA/BA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAIA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnDA;AACA;AAoDA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}