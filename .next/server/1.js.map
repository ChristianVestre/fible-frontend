{"version":3,"file":"1.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/from.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js","webpack:///./src/components/route-management/column.tsx","webpack:///./src/components/route-management/route.tsx","webpack:///./src/components/route-management/selector.tsx","webpack:///./src/components/route-management/selectorManager.tsx","webpack:///./src/redux/actions/dataActions.ts","webpack:///./src/redux/actions/uiActions.ts"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/from\");","import _Object$assign from \"../../core-js/object/assign\";\nexport default function _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import React from 'react';\nimport styled from 'styled-components';\nimport FibleRoute from './route';\nimport {Droppable} from 'react-beautiful-dnd';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faTimes, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport Router from 'next/router'\nimport {initializeInputScreenUi} from '../../redux/actions/uiActions';\nimport {initializeHtype} from '../../redux/actions/dataActions';\nimport {connect} from 'react-redux';\n\n\n\n\nconst Container = styled.div`\n    margin:1em;\n    border: 1px solid lightgray;\n    border-radius:2em;\n    width:100%;\n    height:100%;\n    position: relative;\n\n`\nconst Title = styled.h1`\n    padding:8px;\n`\nconst RouteList = styled.div`\n    padding:8px;\n`\n\n\nclass Column extends React.Component<{column: any, key:any,dataState:any, listItems:any, type:any,initializeInputScreenUi:Function, initializeHtype:Function}> {\n\n    handleInputScreenButton= () =>{\n        Router.push({\n            pathname: '/inputScreen',\n          })\n        this.props.initializeHtype({htype:this.props.type})\n        this.props.initializeInputScreenUi({dispatch:this.props.type})\n\n    }\n\n    render() {\n       return( \n       <Container>\n        <Title>{this.props.column.title}</Title> \n        <Droppable droppableId={this.props.column.id}>\n        {provided => (       \n        <RouteList\n        ref={provided.innerRef}\n        {...provided.droppableProps}\n        >\n        {this.props.listItems.map((itemData, index) => <FibleRoute key={itemData.id} type={this.props.type} itemData={itemData} index={index} columnId={this.props.column.id}/>)}\n        {provided.placeholder}\n        </RouteList>\n        )}\n        </Droppable>\n        <InputScreenButton onClick={this.handleInputScreenButton} >\n            <FontAwesomeIcon icon={faPlus}/>\n        </InputScreenButton>\n        </Container>\n        \n       )}\n\n}\n\nconst mapStateToProps = state => {\n    return {dataState:state.data ,initializeInputScreenState:state.initializeInputScreenState};\n  };\n\n\n\nexport default connect(mapStateToProps,{initializeInputScreenUi, initializeHtype  })(Column);\n\n\n\nconst InputScreenButton = styled.button`\n    position:absolute;\n    bottom:0;\n    right:0;\n    font-size:6vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n\n    :focus {\n        outline:none;\n    }\n    `","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { connect } from \"react-redux\";\nimport {removeRoute, updateSelectorManagerState } from '../../redux/actions/uiActions';\n\n\n\n\n\nclass FibleRoute extends React.Component<{itemData:any,type:any, index:any, removeRoute:any, columnId:string,updateSelectorManagerState:Function,selectorState:any}> {\n\n      \n    \n      handleRemoveRoutes = (e) => {\n        //prevent select state update aswell\n        e.stopPropagation()\n        var itemId = this.props.itemData.id\n        //for removing columns when deleting list items\n        var dispatch = this.props.type == \"STOPS\" ? \"STOP_DESELECT\" : dispatch = \"ROUTE_DESELECT\"\n        var removeIndex = this.props.index;\n        var removeColumn = this.props.columnId;\n        this.props.removeRoute({removeIndex,removeColumn});\n        this.props.updateSelectorManagerState({itemId,dispatch})\n      };\n\n      handleSelectorManagerStateUpdate = () => {\n        var itemId = this.props.itemData.id\n        var dispatch = \"\"\n        switch (this.props.type){\n            case(\"ROUTES\"):{ \n                if(itemId == this.props.selectorState[\"ROUTES\"].id){\n                dispatch = \"ROUTE_DESELECT\"\n               /// borderColor = \"lightgray\"\n                }else{\n                dispatch = \"ROUTE_SELECT\"\n              //  borderColor = \"salmon\"\n                }\n                break\n            }\n            case(\"STOPS\"):{\n            if(this.props.itemData.id == this.props.selectorState[\"STOPS\"].id){\n                dispatch = \"STOP_DESELECT\"\n         //       borderColor = \"lightgray\"\n                }else{\n                dispatch = \"STOP_SELECT\"\n           //     borderColor = \"salmon\"  \n                }\n                break\n            }\n            default:{\n                dispatch = \"ROUTE_SELECT\"\n            }\n            \n        }\n        this.props.updateSelectorManagerState({itemId,dispatch})\n        \n      }\n\n      \n    \n    render(){\n\n        return(\n        <Draggable draggableId={this.props.itemData.id} index={this.props.index}>\n            {provided =>( \n            <Container\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                onClick={this.handleSelectorManagerStateUpdate}\n                color={this.props.itemData.id == this.props.selectorState[this.props.type].id ? \"salmon\":\"lightgray\" }\n                >\n                <Headline>{this.props.itemData.headline}</Headline>\n                <RemoveButton onClick={this.handleRemoveRoutes} >\n                    <FontAwesomeIcon icon={faTimes}/>\n                </RemoveButton>\n            </Container>\n            )\n            }\n        </Draggable>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectorState:state.selector ,updateSelectorManagerState:state.updateSelectorManagerState};\n  };\n\n\n\nexport default connect(mapStateToProps,{ removeRoute, updateSelectorManagerState })(FibleRoute);\n\nconst Container = styled.div`\n    border: 1px solid;\n    border-color: ${props => props.color};\n    border-radius:2em;\n    height:8vh;\n    padding: 8px;\n    margin-bottom:1em;\n    background-color:white;\n    :hover {\n        border-color:rgba(250,128,114 ,0.3 );\n    }\n\n`\n\n\nconst Headline = styled.h3`\n    font-size: 2vh;\n    font-weight:lighter;\n    position:relative;\n    user-select:none;\n    top:10%;\n    left:20%;\n    margin:0;\n    color:black;\n    border:none;\n    background:none;\n    text-decoration: none;   \n`\n\nconst RemoveButton = styled.button`\n    position:relative;\n    bottom:2vh;\n    left:95%;\n    margin-right:3vw;\n    font-size:2vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n\n    :focus {\n        outline:none;\n    }\n\n    \n`\n","import styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport React from 'react';\nimport Column from './column';\nimport { connect } from 'react-redux';\nimport { updateOrder, updateSelectorManagerState } from '../../redux/actions/uiActions'\n\n\n\nclass Selector extends React.Component<{ uiState: any,selectorState:any, type: string, updateOrder: Function }> {\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId == source.droppableId &&\n            destination.index == source.index) {\n            return;\n        }\n        const columnId = source.droppableId;\n        const column = this.props.uiState.columns[source.droppableId]\n        const newOrder = Array.from(column.ids);\n\n        newOrder.splice(source.index, 1);\n        newOrder.splice(destination.index, 0, draggableId);\n\n        this.props.updateOrder({ newOrder, columnId })\n    }\n\n\n    selectorFunction = () => {\n        //fix reordering problem\n        switch (this.props.type) {\n            case (\"ROUTES\"): {\n                const columnId = \"column-1\";\n                const column = this.props.uiState.columns[columnId];\n                const routes = column.ids.map((routeId) => this.props.uiState.routes[routeId])\n                return <Column key={columnId} column={column} type=\"ROUTES\" listItems={routes} />;\n            }\n            case (\"STOPS\"):{\n                const columnId = \"column-2\";\n                const column = this.props.uiState.columns[columnId];\n                const stops = column.ids.map((stopId) => this.props.uiState.stops[stopId])\n                return <Column key={columnId} column={column} type=\"STOPS\" listItems={stops} />;\n            }\n            case (\"POIS\"): {\n                const columnId = \"column-3\";\n                const column = this.props.uiState.columns[columnId];\n                let pois = []\n                column.ids.length>0 ?\n                pois = column.ids.map((poiId) => this.props.uiState.pois[poiId]) :\n                pois = [];\n                return <Column key={columnId} column={column} type=\"POIS\" listItems={pois} />;\n            }\n            default:\n                return <p>wrong</p>\n        }\n    }\n    render() {\n        return <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.selectorFunction()}\n        </DragDropContext>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return { selectorState: state.selector, uiState:state.ui, updateOrder: state.updateOrder };\n};\n\nexport default connect(mapStateToProps, { updateOrder, updateSelectorManagerState })(Selector);\n\n","import styled from 'styled-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Selector from './selector';\n\n\n\n\nclass SelectorManager extends React.Component<{selectorState:any}> {\n    \n    SelectorChoice = () => {\n            if (this.props.selectorState.ROUTES.selected == false && this.props.selectorState.STOPS.selected == false){\n                   return <OneSelectorWrapper>\n                   <Selector type=\"ROUTES\"/>\n                   </OneSelectorWrapper>\n                \n            } else if (this.props.selectorState.ROUTES.selected == true && this.props.selectorState.STOPS.selected == false){\n                    return<TwoSelectorsWrapper>\n                    <Selector type=\"ROUTES\"/>\n                    <Selector type=\"STOPS\"/>\n                    </TwoSelectorsWrapper>\n            } else if (this.props.selectorState.ROUTES.selected == true && this.props.selectorState.STOPS.selected == true){\n                    return<ThreeSelectorsWrapper>\n                    <Selector type=\"ROUTES\"/>\n                    <Selector type=\"STOPS\"/>\n                    <Selector type=\"POIS\"/>\n                    </ThreeSelectorsWrapper>    \n            } else if (this.props.selectorState.ROUTES.selected == false && this.props.selectorState.STOPS.selected == true){\n                    return<OneSelectorWrapper>\n                    <Selector type=\"ROUTES\"/>\n                    </OneSelectorWrapper>\n            }\n    }\n\n    render(){\n        return<Container>\n            {this.SelectorChoice()}\n        </Container>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectorState:state.selector};\n  };\n\nexport default connect(mapStateToProps)(SelectorManager);\n\nconst Container = styled.div`\n    width:100vw;\n    height:80vh;\n    position:absolute;\n    bottom:3vh;\n`\nconst OneSelectorWrapper = styled.div`\n    position:relative;\n    width:30vw;\n    left:35vw;\n    height:100%;\n    margin:0;\n    padding:0;\n    align-content:center;\n    display:flex;\n    flex-direction:row;\n    bottom:5%;\n`\n\nconst TwoSelectorsWrapper = styled.div`\n    position:relative;\n    left:20vw;\n    width:60vw;\n    height:100%;\n    margin:0;\n    padding:0;\n    align-content:center;\n    display:flex;\n    flex-direction:row;\n    bottom:5%;\n`\nconst ThreeSelectorsWrapper = styled.div`\n    position:relative;\n    margin:0;\n    padding:0;\n    width:90vw;\n    height:100%;\n    left:5vw;\n    align-content:center;\n    display:flex;\n    flex-direction:row;\n    bottom:5%;\n`","import { HEADLINE,\n  INITIALIZE_HTYPE,\n  DELETE_HTYPE,\n  EMPTY_SELECTED_COMPONENT_ID,\n  SET_SELECTED_COMPONENT,\n  UPDATE_COMPONENTS_ORDER,\n\n\n\n} from \"./types\";\n\n\nlet addHeadlineId = 0;\nlet initializeHtypeId = 0;\nlet deleteHtypeId = 0;\nlet emptySelectedComponentId = 0;\nlet setSelectedComponentId = 0;\nlet updateComponentsOrderId = 0;\n\n\n\nexport const addOrUpdateHeadline = content => ({\n  type: HEADLINE,\n  payload: {\n    id:++addHeadlineId,\n    content,\n  }\n})\n\nexport const initializeHtype = content => ({\n  type: INITIALIZE_HTYPE,\n  payload: {\n    id:++initializeHtypeId,\n    content,\n  }\n})\n\nexport const deleteHtype = content => ({\n  type: DELETE_HTYPE,\n  payload: {\n    id:++deleteHtypeId,\n    content,\n  }\n})\n\nexport const emptySelectedComponent = content => ({\n  type: EMPTY_SELECTED_COMPONENT_ID,\n  payload:{\n    id:++emptySelectedComponentId,\n  }\n})\n\nexport const setSelectedComponent = content => ({\n  type: SET_SELECTED_COMPONENT,\n  payload:{\n    id:++setSelectedComponentId,\n    content\n  }\n})\n\nexport const updateComponentsOrder = content => ({\n  type: UPDATE_COMPONENTS_ORDER,\n  payload:{\n    id:++updateComponentsOrderId,\n    content\n  }\n})","import { REMOVE_ROUTE, UPDATE_ROUTE_STATE, UPDATE_SELECTOR_MANAGER_STATE, \n    UPDATE_INPUT_SCREEN_UI, INITIALIZE_INPUT_SCREEN_UI, \n    UPDATE_SIMULATOR_SELECTION\n  } from \"./types\";\n  //includes route management actions\n\n\n  let routeId = 0;\n  let updateId = 0;\n  let updateManagerStateId = 0;\n  let updateInputScreenUiId = 0;\n  let initializeInputScreenUiId = 0;\n  let updateSimulatorSelectionId = 0;\n\n\n  export const removeRoute = content => ({\n    type: REMOVE_ROUTE,\n    payload: {\n      id: ++routeId,\n      content,\n    }\n  });\n  \n  export const updateOrder = content => ({\n      type: UPDATE_ROUTE_STATE,\n      payload: {\n        id: ++updateId,\n        content,\n      }\n    });\n  \n  export const updateSelectorManagerState = content => ({\n      type: UPDATE_SELECTOR_MANAGER_STATE,\n      payload: {\n        id:++updateManagerStateId,\n        content,\n      }\n   })\n  \n   export const updateInputScreenUi = content => ({\n    type: UPDATE_INPUT_SCREEN_UI,\n    payload: {\n      id:++updateInputScreenUiId,\n      content,\n    }\n  })\n  \n  export const initializeInputScreenUi = content => ({\n    type: INITIALIZE_INPUT_SCREEN_UI,\n    payload: {\n      id:++initializeInputScreenUiId,\n      content,\n    }\n    \n  })\n\n  export const updateSimulatorSelection = content => ({\n    type: UPDATE_SIMULATOR_SELECTION,\n    payload: {\n      id:++updateSimulatorSelectionId,\n      content,\n    }\n    \n  })"],"mappings":"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","sourceRoot":""}