{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-properties.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptor.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptors.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-symbols.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/extends.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault.js","webpack:///./node_modules/next/app.js","webpack:///./node_modules/next/dist/next-server/lib/utils.js","webpack:///./node_modules/next/dist/pages/_app.js","webpack:///./src/lib/apollo.jsx","webpack:///./src/lib/redux/actions/dataActions.ts","webpack:///./src/lib/redux/actions/types.ts","webpack:///./src/lib/redux/reducers/dataReducer.ts","webpack:///./src/lib/redux/reducers/index.ts","webpack:///./src/lib/redux/reducers/uiReducer.ts","webpack:///./src/lib/redux/redux.jsx","webpack:///./src/lib/redux/store.js","webpack:///./src/pages/index.tsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@apollo/react-ssr\"","webpack:///external \"apollo-cache-inmemory\"","webpack:///external \"apollo-client\"","webpack:///external \"apollo-link-context\"","webpack:///external \"apollo-link-http\"","webpack:///external \"cookie\"","webpack:///external \"core-js/library/fn/object/assign\"","webpack:///external \"core-js/library/fn/object/define-properties\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptor\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptors\"","webpack:///external \"core-js/library/fn/object/get-own-property-symbols\"","webpack:///external \"core-js/library/fn/object/keys\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"graphql-tag\"","webpack:///external \"https-proxy-agent\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/head\"","webpack:///external \"next/router\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-redux\"","webpack:///external \"redux\"","webpack:///external \"redux-devtools-extension\"","webpack:///external \"redux-thunk\"","webpack:///external \"styled-components\"","webpack:///external \"url\"","webpack:///external \"uuid/v4\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/index.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _Object$assign from \"../../core-js/object/assign\";\nexport default function _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import _Object$getOwnPropertySymbols from \"../../core-js/object/get-own-property-symbols\";\nimport objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (_Object$getOwnPropertySymbols) {\n    var sourceSymbolKeys = _Object$getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import _Object$keys from \"../../core-js/object/keys\";\nexport default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n\n  var sourceKeys = _Object$keys(source);\n\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","var _Object$assign = require(\"../core-js/object/assign\");\n\nfunction _extends() {\n  module.exports = _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","module.exports = require('./dist/pages/_app')\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\n/**\n * Utils\n */\nfunction execOnce(fn) {\n    let used = false;\n    let result = null;\n    return (...args) => {\n        if (!used) {\n            used = true;\n            result = fn.apply(this, args);\n        }\n        return result;\n    };\n}\nexports.execOnce = execOnce;\nfunction getLocationOrigin() {\n    const { protocol, hostname, port } = window.location;\n    return `${protocol}//${hostname}${port ? ':' + port : ''}`;\n}\nexports.getLocationOrigin = getLocationOrigin;\nfunction getURL() {\n    const { href } = window.location;\n    const origin = getLocationOrigin();\n    return href.substring(origin.length);\n}\nexports.getURL = getURL;\nfunction getDisplayName(Component) {\n    return typeof Component === 'string'\n        ? Component\n        : Component.displayName || Component.name || 'Unknown';\n}\nexports.getDisplayName = getDisplayName;\nfunction isResSent(res) {\n    return res.finished || res.headersSent;\n}\nexports.isResSent = isResSent;\nasync function loadGetInitialProps(App, ctx) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (App.prototype && App.prototype.getInitialProps) {\n            const message = `\"${getDisplayName(App)}.getInitialProps()\" is defined as an instance method - visit https://err.sh/zeit/next.js/get-initial-props-as-an-instance-method for more information.`;\n            throw new Error(message);\n        }\n    }\n    // when called from _app `ctx` is nested in `ctx`\n    const res = ctx.res || (ctx.ctx && ctx.ctx.res);\n    if (!App.getInitialProps) {\n        if (ctx.ctx && ctx.Component) {\n            // @ts-ignore pageProps default\n            return {\n                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n            };\n        }\n        return {};\n    }\n    const props = await App.getInitialProps(ctx);\n    if (res && isResSent(res)) {\n        return props;\n    }\n    if (!props) {\n        const message = `\"${getDisplayName(App)}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`;\n        throw new Error(message);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        if (Object.keys(props).length === 0 && !ctx.ctx) {\n            console.warn(`${getDisplayName(App)} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://err.sh/zeit/next.js/empty-object-getInitialProps`);\n        }\n    }\n    return props;\n}\nexports.loadGetInitialProps = loadGetInitialProps;\nexports.urlObjectKeys = [\n    'auth',\n    'hash',\n    'host',\n    'hostname',\n    'href',\n    'path',\n    'pathname',\n    'port',\n    'protocol',\n    'query',\n    'search',\n    'slashes',\n];\nfunction formatWithValidation(url, options) {\n    if (process.env.NODE_ENV === 'development') {\n        if (url !== null && typeof url === 'object') {\n            Object.keys(url).forEach(key => {\n                if (exports.urlObjectKeys.indexOf(key) === -1) {\n                    console.warn(`Unknown key passed via urlObject into url.format: ${key}`);\n                }\n            });\n        }\n    }\n    return url_1.format(url, options);\n}\nexports.formatWithValidation = formatWithValidation;\nexports.SUPPORTS_PERFORMANCE = typeof performance !== 'undefined';\nexports.SUPPORTS_PERFORMANCE_USER_TIMING = exports.SUPPORTS_PERFORMANCE &&\n    typeof performance.mark === 'function' &&\n    typeof performance.measure === 'function';\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");exports.__esModule=true;exports.Container=Container;exports.createUrl=createUrl;exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));var _asyncToGenerator2=_interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));var _react=_interopRequireDefault(require(\"react\"));var _utils=require(\"../next-server/lib/utils\");exports.AppInitialProps=_utils.AppInitialProps;/**\n * `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.\n * This allows for keeping state between navigation, custom error handling, injecting additional data.\n */function appGetInitialProps(_x){return _appGetInitialProps.apply(this,arguments);}function _appGetInitialProps(){_appGetInitialProps=(0,_asyncToGenerator2.default)(function*(_ref){var{Component,ctx}=_ref;var pageProps=yield(0,_utils.loadGetInitialProps)(Component,ctx);return{pageProps};});return _appGetInitialProps.apply(this,arguments);}class App extends _react.default.Component{// Kept here for backwards compatibility.\n// When someone ended App they could call `super.componentDidCatch`.\n// @deprecated This method is no longer needed. Errors are caught at the top level\ncomponentDidCatch(error,_errorInfo){throw error;}render(){var{router,Component,pageProps}=this.props;var url=createUrl(router);return _react.default.createElement(Component,(0,_extends2.default)({},pageProps,{url:url}));}}exports.default=App;App.origGetInitialProps=appGetInitialProps;App.getInitialProps=appGetInitialProps;var warnContainer;var warnUrl;if(process.env.NODE_ENV!=='production'){warnContainer=(0,_utils.execOnce)(()=>{console.warn(\"Warning: the `Container` in `_app` has been deprecated and should be removed. https://err.sh/zeit/next.js/app-container-deprecated\");});warnUrl=(0,_utils.execOnce)(()=>{console.error(\"Warning: the 'url' property is deprecated. https://err.sh/zeit/next.js/url-deprecated\");});}// @deprecated noop for now until removal\nfunction Container(p){if(process.env.NODE_ENV!=='production')warnContainer();return p.children;}function createUrl(router){// This is to make sure we don't references the router object at call time\nvar{pathname,asPath,query}=router;return{get query(){if(process.env.NODE_ENV!=='production')warnUrl();return query;},get pathname(){if(process.env.NODE_ENV!=='production')warnUrl();return pathname;},get asPath(){if(process.env.NODE_ENV!=='production')warnUrl();return asPath;},back:()=>{if(process.env.NODE_ENV!=='production')warnUrl();router.back();},push:(url,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();return router.push(url,as);},pushTo:(href,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();var pushRoute=as?href:'';var pushUrl=as||href;return router.push(pushRoute,pushUrl);},replace:(url,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();return router.replace(url,as);},replaceTo:(href,as)=>{if(process.env.NODE_ENV!=='production')warnUrl();var replaceRoute=as?href:'';var replaceUrl=as||href;return router.replace(replaceRoute,replaceUrl);}};}","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport cookie from 'cookie'\nimport Head from 'next/head'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport fetch from 'isomorphic-unfetch'\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState, { getToken })\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    // Warn if old way of installing apollo is used\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    }\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx.req)\n        }\n      ))\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {}\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {}\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState\n      }\n    }\n  }\n\n  return WithApollo\n}\n\nlet apolloClient = null\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient (...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(...args)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args)\n  }\n\n  return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient (initialState = {}, { getToken }) {\n  const fetchOptions = {agent:\"\"}\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  if (typeof window === 'undefined') {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(\n        process.env.https_proxy\n      )\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:8000/graphql', // Server URL (must be absolute)\n    credentials: 'include',\n    fetch,\n    fetchOptions\n  })\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken()\n    return {\n      headers: {\n        ...headers,\n        cookie: token ? `qid=${token.qid} ` : '',\n        cookie_2:token ? `hid=${token.hid} `: ''\n      }\n    }\n  })\n//hid=${token.hid}\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  })\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken (req) {\n  const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n//  console.log(cookies)\n  return cookies\n}\n\n\n/*import React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\n\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({}))\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  return apolloClient\n}\n\n\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:8000/graphql', // Server URL (must be absolute)\n      credentials: 'include', // Additional fetch() options like `credentials` or `headers`\n      fetch,\n    }),\n    cache: new InMemoryCache().restore(initialState),\n  })\n}\n\n*/","import { HEADLINE,\n  INITIALIZE_HTYPE,\n  DELETE_HTYPE,\n  EMPTY_SELECTED_COMPONENT_ID,\n  SET_SELECTED_COMPONENT,\n  UPDATE_COMPONENTS_ORDER,\n  CLEAN_NONSAVED_HTYPES,\n  LOAD_USER,\n  CLEAN_USER,\n  LOAD_HTYPE_DATA,\n  INITIALIZE_INPUTSCREEN,\n\n  INITIALIZE_INPUTSCREEN_DATA,\n  LOAD_ROUTEMGMT_DATA,\n  LOAD_INPUTSCREEN_DATA,\n  UPDATE_STOP_AND_POI_DATA,\n  DATA_ADD_NEW_COMPONENT,\n  DATA_UPDATE_COMPONENT,\n  DATA_HANDLE_HTYPE_NAME_CHANGE\n\n} from \"./types\";\n\n\nlet headlineId = 0;\nlet initializeHtypeId = 0;\nlet deleteHtypeId = 0;\nlet emptySelectedComponentId = 0;\nlet setSelectedComponentId = 0;\nlet updateComponentsOrderId = 0;\nlet cleanNonsavedHtypesId = 0;\nlet loadUserId = 0;\nlet cleanUserId = 0;\nlet loadHtypeDataId = 0;\nlet initializeInputscreenId = 0;\n//----\nlet initializeInputScreenDataId = 0;\nlet loadRouteMgmtDataId = 0;\nlet loadInputScreenDataId = 0;\nlet updateStopAndPoiDataId = 0;\nlet dataUpdateComponentId =0;\nlet dataAddNewComponentId = 0;\nlet dataHandleHtypeNameChangeId = 0;\n\n\n\n\n\n\nexport const initializeHtype = content => ({\n  type: INITIALIZE_HTYPE,\n  payload: {\n    id:++initializeHtypeId,\n    content,\n  }\n})\n\nexport const deleteHtype = content => ({\n  type: DELETE_HTYPE,\n  payload: {\n    id:++deleteHtypeId,\n    content,\n  }\n})\n\nexport const emptySelectedComponent = content => ({\n  type: EMPTY_SELECTED_COMPONENT_ID,\n  payload:{\n    id:++emptySelectedComponentId,\n  }\n})\n\nexport const setSelectedComponent = content => ({\n  type: SET_SELECTED_COMPONENT,\n  payload:{\n    id:++setSelectedComponentId,\n    content\n  }\n})\n\nexport const updateComponentsOrder = content => ({\n  type: UPDATE_COMPONENTS_ORDER,\n  payload:{\n    id:++updateComponentsOrderId,\n    content\n  }\n})\n\nexport const cleanNonsavedHtypes = () => ({\n  type: CLEAN_NONSAVED_HTYPES,\n  payload:{\n    id:++cleanNonsavedHtypesId,\n  }\n})\n\nexport const loadUser = content => ({\n  type: LOAD_USER,\n  payload:{\n    id:++loadUserId,\n    content,\n  }\n})\n\nexport const loadHtypeData = content => ({\n  type: LOAD_HTYPE_DATA,\n  payload:{\n    id:++loadHtypeDataId,\n    content,\n  }\n})\n\nexport const loadComponents = content => ({\n\n})\n\nexport const cleanUser = () => ({\n  type: CLEAN_USER,\n  payload:{\n    id:++cleanUserId\n  }\n})\n\nexport const initializeInputScreen = content => ({\n  type: INITIALIZE_INPUTSCREEN,\n  payload:{\n    id:++initializeInputscreenId,\n    content\n  }\n})\n\n//.....\n\n\n\n\n\n\n\nexport const initializeInputScreenData = content => ({\n  type: INITIALIZE_INPUTSCREEN_DATA,\n  payload:{\n    id:++initializeInputScreenDataId,\n    content\n  }\n})\n\nexport const loadRouteMgmtData = content => ({\n  type: LOAD_ROUTEMGMT_DATA,\n  payload:{\n    id:++loadRouteMgmtDataId,\n    content\n  }\n})\n\nexport const loadInputScreenData = content => ({\n  type: LOAD_INPUTSCREEN_DATA,\n  payload:{\n    id:++loadInputScreenDataId,\n    content\n  }\n})\n\nexport const updateStopAndPoiData = content => ({\n  type: UPDATE_STOP_AND_POI_DATA,\n  payload:{\n    id:++updateStopAndPoiDataId,\n    content\n  }\n})\nexport const addOrUpdateHeadline = content => ({\n  type: HEADLINE,\n  payload: {\n    id:++headlineId,\n    content,\n  }\n})\n\nexport const dataUpdateComponent = content => ({\n  type: DATA_UPDATE_COMPONENT,\n  payload: {\n    id:++dataUpdateComponentId,\n    content,\n  }\n})\n\nexport const dataAddNewComponent = content => ({\n  type: DATA_ADD_NEW_COMPONENT,\n  payload: {\n    id:++dataAddNewComponentId,\n    content,\n  }\n})\n\n\nexport const dataHandleHtypeNameChange = content => ({\n  type: DATA_HANDLE_HTYPE_NAME_CHANGE,\n  payload: {\n    id:++dataHandleHtypeNameChangeId,\n    content,\n  }\n})\n","export const REMOVE_ROUTE = \"REMOVE_ROUTE\";\nexport const UPDATE_ROUTE_STATE = \"UPDATE_ROUTE_STATE\";\nexport const UPDATE_SELECTOR_MANAGER_STATE = \"UPDATE_SELECTOR_MANAGER_STATE\";\n\nexport const INITIALIZE_INPUT_SCREEN_UI = \"INITIALIZE_INPUT_SCREEN_UI\";\nexport const HEADLINE = \"HEADLINE\";\nexport const INITIALIZE_HTYPE = \"INITIALIZE_HTYPE\";\nexport const DELETE_HTYPE = \"DELETE_HTYPE\"\nexport const EMPTY_SELECTED_COMPONENT_ID = \"EMPTY_SELECTED_COMPONENT_ID\"\nexport const UPDATE_SIMULATOR_SELECTION = \"UPDATE_SIMULATOR_SELECTION\"\nexport const SET_SELECTED_COMPONENT = \"SET_SELECTED_COMPONENT\"\nexport const UPDATE_COMPONENTS_ORDER = \"UPDATE_COMPONENTS_ORDER\"\nexport const CLEAN_NONSAVED_HTYPES = \"CLEAN_NONSAVED_HTYPES\"\nexport const STOP_AND_POI_MANAGER_CONTROLLER = \"STOP_AND_POI_MANAGER_CONTROLLER\"\nexport const SET_TITLE = \"SET_TITLE\"\nexport const LOAD_USER = \"LOAD_USER\"\nexport const CLEAN_USER = \"CLEAN_USER\"\nexport const LOAD_HTYPE_DATA = \"LOAD_HTYPE_DATA\"\nexport const INITIALIZE_INPUTSCREEN = \"INITIALIZE_INPUTSCREEN\"\n//.---------------------------\n//----Data------\nexport const INITIALIZE_INPUTSCREEN_DATA = \"INITIALIZE_INPUTSCREEN_DATA\"\nexport const LOAD_ROUTEMGMT_DATA = \"LOAD_ROUTEMGMT_DATA\"\nexport const LOAD_INPUTSCREEN_DATA = \"LOAD_INPUTSCREEN_DATA\"\nexport const UPDATE_STOP_AND_POI_DATA = \"UPDATE_STOP_AND_POI_DATA\"\nexport const DATA_HANDLE_HTYPE_NAME_CHANGE = \"DATA_HANDLE_HTYPE_NAME_CHANGE\"\nexport const DATA_UPDATE_COMPONENT = \"DATA_UPDATE_COMPONENT\";\nexport const DATA_ADD_NEW_COMPONENT = \"DATA_ADD_NEW_COMPONENT\";\n//-----UI-------\nexport const UPDATE_ROUTEMGMT_STATE = \"UPDATE_ROUTEMGMT_STATE\"\nexport const LOAD_STOP_AND_POI_MANAGER_STATE = \"LOAD_STOP_AND_POI_MANAGER_STATE\"\nexport const UPDATE_INPUT_SCREEN_STATE = \"UPDATE_INPUT_SCREEN_STATE\";\nexport const UPDATE_SIMULATOR_SELECTION_STATE = \"UPDATE_SIMULATOR_SELECTION_STATE\";\n","import {\n    UPDATE_COMPONENTS_ORDER,\n    HEADLINE, INITIALIZE_HTYPE, DELETE_HTYPE,\n    EMPTY_SELECTED_COMPONENT_ID, SET_SELECTED_COMPONENT,\n    CLEAN_NONSAVED_HTYPES, LOAD_USER, CLEAN_USER, LOAD_HTYPE_DATA,\n    INITIALIZE_INPUTSCREEN_DATA, LOAD_ROUTEMGMT_DATA, LOAD_INPUTSCREEN_DATA,\n    UPDATE_STOP_AND_POI_DATA,\n    DATA_ADD_NEW_COMPONENT,\n    DATA_UPDATE_COMPONENT,\n    DATA_HANDLE_HTYPE_NAME_CHANGE\n} from \"../actions/types\";\nimport uuid from \"uuid/v4\";\nimport Cookie from 'js-cookie';\n\n//HTYPE is the hierarchy type, aka route, stop, etc\n//DATA REDUCER + UI REDUCER + ROUTE MANAGEMENT SCREEN REDUCER\n\n//make a reducer that cleans up the routes stops etc when you go to the route management screen.\n\n\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LOAD_ROUTEMGMT_DATA:{\n            const {htypes} = action.payload.content\n            const {user} = action.payload.content\n            const content = {}\n            for(let item of Object.keys(htypes)) {\n            let key = item.substring(3,).toLowerCase()\n            content[key] =htypes[item].reduce((result, attri) => { \n                if(attri){\n                result[attri.id] = attri;\n                }\n            return result;\n            }, {}) \n            }\n            return {\n                ...state,\n                routeMgmt:{\n                    user:{\n                    ...user,\n                    routes:htypes.getRoutes[0] === null ? []:htypes.getRoutes ,\n                    stops:htypes.getStops[0] === null ? []:htypes.getStops ,\n                    pois:htypes.getPois[0] === null ? []:htypes.getPois \n                                \n                    },\n                    routes:{\n                        ...content[\"routes\"]\n                    },\n                    stops:{\n                        ...content[\"stops\"]\n                    },\n                    pois:{\n                        ...content[\"pois\"]\n                    }\n                }\n            }\n            }\n            case INITIALIZE_INPUTSCREEN_DATA:{\n                const {htype} = action.payload.content;\n                const {user} = action.payload.content;\n                const htypeid = htype.substring(0, 2) + \"_\" + uuid();\n                return {\n                    ...state,\n                        inputScreen:{\n                            ...state.inputScreen,\n                            user: {\n                                ...state.inputScreen.user,\n                                [htype]: [...state.inputScreen.user[htype], htypeid]\n                    },\n                    selectedHtypeId: htypeid,\n                    selectedHtype:htype +\"s\",\n                    [htype]: {\n                        ...state[htype],\n                        //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                        [htypeid]: {\n                            //take the name of the account owner\n                            //saved:false,\n                            id:htypeid,\n                            owner: user.name,\n                            //name to be filled out when the route is finished\n                            name: \"\",\n                            components: [],\n                        }\n                    },\n                    }\n                }\n                };\n            \n            case LOAD_INPUTSCREEN_DATA:{\n                const {htype} = action.payload.content;\n                const {htypeData} = action.payload.content;\n                const {user} = action.payload.content;\n                const {componentsArray} = action.payload.content;\n                console.log(componentsArray)\n                const htypeid = htypeData[htype].id;\n                console.log(action.payload.content)\n\n                let components = componentsArray.reduce((result, attri) => { \n                        if(attri){\n                        result[attri.id] = attri;\n                        }\n                    return result;\n                    }, {}) \n                    let componentIdsArray = componentsArray.reduce((result, attri) => { \n                        if(attri){\n                        result.push(attri.id)\n                        }\n                    return result;\n                    }, []) \n                return {\n                    ...state,\n                        inputScreen:{\n                            ...state.inputScreen,\n                            user: {\n                                ...user,\n                    },\n                    selectedHtypeId: htypeid,\n                    selectedHtype:htype +\"s\",\n                    [htype+\"s\"]: {\n                        ...state[htype+\"s\"],\n                        //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                        [htypeid]: {\n                            ...htypeData[htype]\n                        }\n                    },\n                    components:{\n                        ...components\n                    }\n                \n                    }\n                };\n            }\n            case UPDATE_STOP_AND_POI_DATA:{\n                const {htype} = action.payload.content;\n                const {dispatch} = action.payload.dispatch;\n                const {htypeParent} = action.payload.content;\n                const {htypeid} = action.payload.content;\n                const {routeid} = action.payload.content;\n                const index = state.routeMgmt.user[htype].indexOf(htypeid)\n                let routes;\n                let stops;\n                //const newOrder = Array.from(state.inputScreen.user[htypeParent]);\n                if(htype == \"poi\") {\n                    let {stopid} = action.payload.content.stopid\n                    let route = state.routeMgmt.routes[routeid].pois\n                    let stop = state.routeMgmt.routes[stopid].pois\n                    if(dispatch == \"ADD\"){\n                        route = route.push(htypeid)\n                        stop = stop.push(htypeid)\n                    }else if(dispatch == \"REMOVE\"){\n                        const stopIndex = state.routeMgmt.stops[stopid].pois.indexOf(htypeid)\n                        const routeIndex = state.routeMgmt.routes[routeid].pois.indexOf(htypeid)\n                        route = route.splice(routeIndex,1);\n                        stop = stop.splice(stopIndex,1);\n                    }\n                return {\n                    ...state,\n                    routeMgmt:{\n                        ...state.routeMgmt,\n                        routes:{\n                            ...state.routeMgmt.routes,\n                            [routeid]:{\n                                ...state.routeMgmt.routes[routeid],\n                                pois:route,\n                            }\n                        },\n                        stops:{\n                            ...state.routeMgmt.stops,\n                            [stopid]:{\n                                ...state.routeMgmt.stops[stopid],\n                                pois:stop\n                            }\n                        }\n                }\n                };\n            } else {\n                let route = state.routeMgmt.routes[routeid].stops\n                if(dispatch == \"ADD\"){\n                    route = route.push(htypeid)\n                }else if(dispatch == \"REMOVE\"){\n                    const routeIndex = state.routeMgmt.routes[routeid].pois.indexOf(htypeid)\n                    route = route.splice(routeIndex,1);\n                }\n            return {\n                ...state,\n\n                routeMgmt:{\n                    ...state.routeMgmt,\n                    routes:{\n                        ...state.routeMgmt,\n                        [routeid]:{\n                            ...state.routeMgmt[routeid],\n                            stops:route\n                        },\n                    }\n                }\n            }\n            };\n            }\n            case DATA_ADD_NEW_COMPONENT:{\n                const {htype} = action.payload.content\n                const {selectedHtypeId} = action.payload.content\n                const {component} = action.payload.content;\n                const newComponentsArray =  [...state.inputScreen[htype][selectedHtypeId].components,component.id]\n                return {\n                    ...state,\n                    inputScreen:{\n                        ...state.inputScreen,\n                        selectedComponentId:component.id,\n                        [htype]: {\n                            ...state.inputScreen[htype],\n                            [selectedHtypeId]: {\n                                ...state.inputScreen[htype][selectedHtypeId],\n                                components:newComponentsArray,\n                            }\n                        },\n                        components: {\n                            ...state.inputScreen.components,\n                            [component.id]:{\n                                ...component\n                            }\n                        },\n                    }\n                }\n            }\n            case DATA_UPDATE_COMPONENT:{\n                const {content} = action.payload.content\n                const {selectedComponentId} = action.payload.content\n                return {\n                    ...state,\n                    inputScreen:{\n                        ...state.inputScreen,\n                    components:{\n                            ...state.inputScreen.components,\n                            [selectedComponentId]: {\n                                ...state.inputScreen.components[selectedComponentId],\n                                content: content\n                            }\n                        }\n                    }\n                }\n            }\n            case (UPDATE_COMPONENTS_ORDER): {\n                const newOrder = action.payload.content.newOrder\n                const htype = action.payload.content.htype\n                const selectedHtypeId = action.payload.content.selectedHtypeId\n                return {\n                    ...state,\n                    inputScreen:{\n                        ...state.inputScreen,\n                    [htype]: {\n                        ...state.inputScreen[htype],\n                        [selectedHtypeId]: {\n                            ...state.inputScreen[htype][selectedHtypeId],\n                            components: newOrder,\n                        }\n                    }\n                    }\n                }\n            };\n                case EMPTY_SELECTED_COMPONENT_ID: {\n                    return {\n                        ...state,\n                        selectedComponentId: \"empty\",\n                    }\n                }\n                case SET_SELECTED_COMPONENT: {\n                    const selectedComponentId = action.payload.content.selectedComponentId\n                    return {\n                        ...state,\n                        inputScreen:{\n                            ...state.inputScreen,\n                            selectedComponentId: selectedComponentId,\n                        }\n                    }\n                }\n                case DATA_HANDLE_HTYPE_NAME_CHANGE:{\n                    const {newName} = action.payload.content\n                    const {htypeId} = action.payload.content\n                    const {htype} = action.payload.content\n                    return {\n                        ...state,\n                        inputScreen:{\n                            ...state.inputScreen,\n                            [htype]:{\n                                ...state.inputScreen[htype],\n                                [htypeId]:{\n                                    ...state.inputScreen[htype][htypeId],\n                                    name:newName\n                                }\n                            }\n                        }\n                        \n                    }\n                }\n\n            default:\n                    return state\n        }\n        \n\n    }\n\n\n\n    const initialState = {\n        routeMgmt: {\n            user: {\n                name: \"\",\n                routes: [],\n                stops: [],\n                pois: [],\n                email: \"\",\n            },\n            routes: {},\n            stops: {},\n            pois: {},\n        },\n        inputScreen: {\n            user: {\n            },\n            selectedHtypeId: \"\",\n            selectedComponentId: \"empty\",\n            selectedHtype:\"\",\n            routes:{\n            },\n            pois:{},\n            stops:{},\n            components: {},\n        },\n        \n    \n}\n/*\n\n\n\n\n        case LOAD_HTYPE_DATA: {\n            const content = {}\n            for (let item of Object.keys(action.payload.content.data)) {\n                //to not create a component object in the user state\n                let key = item.substring(3).toLowerCase()\n                console.log(key)\n                content[key] = action.payload.content.data[item].reduce((result, attri, index) => {\n                    if (attri) {\n                        result[attri.id] = attri;\n                    } //a, b, c\n                    return result;\n                }, {})\n            }\n\n            return {\n                ...state,\n                user:{\n                    ...state.user,\n                    routes:action.payload.content.data.getRoutes[0] === null ? []:action.payload.content.data.getRoutes ,\n                    stops:action.payload.content.data.getStops[0] === null ? []:action.payload.content.data.getStops ,\n                    pois:action.payload.content.data.getPois[0] === null ? []:action.payload.content.data.getPois \n                }\n                routes: {\n                    ...content[\"routes\"]\n                },\n                stops: {\n                    ...content[\"stops\"]\n                },\n                pois: {\n                    ...content[\"pois\"]\n                }\n            }\n        }\n\n        case LOAD_USER: {\n            const { name, email, routes, stops, pois } = action.payload.content;\n            return {\n                ...state,\n                user: {\n                    name: name,\n                    routes: routes ? routes : [],\n                    stops: stops ? stops : [],\n                    pois: pois ? pois : [],\n                    email: email,\n                }\n            }\n        }\n        case CLEAN_USER: {\n            return {\n                ...state,\n                user: {\n                    name: '',\n                    routes: [],\n                    stops: [],\n                    pois: [],\n                    email: '',\n                },\n                //the id of the hcomponent being worked on\n                selectedHtypeId: '',\n                selectedComponentId: \"empty\",\n                routes: {},\n                stops: {},\n                pois: {},\n            }\n        }\n        case INITIALIZE_HTYPE: {\n            //const selectedDispatch = action.payload.content.dispatch;\n            const htype = action.payload.content.htype;\n            const htypeid = htype.substring(0, 2) + \"_\" + uuid\n            return {\n                ...state,\n                user: {\n                    ...state.data.inputScreen.user,\n                    [htype]: [...state.data.inputScreen.user[htype], htypeid]\n                },\n                selectedHtypeId: htypeid,\n                [htype]: {\n                    ...state[htype],\n                    //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                    [htypeid]: {\n                        //take the name of the account owner\n                        saved: false,\n                        owner: state.data.inputScreen.user.name,\n                        //name to be filled out when the route is finished\n                        name: \"\",\n                        order: [],\n                        components: {},\n\n                    }\n                }\n            };\n        }\n        case EMPTY_SELECTED_COMPONENT_ID: {\n            return {\n                ...state,\n                selectedComponentId: \"empty\",\n            }\n        }\n        case DELETE_HTYPE: {\n            const htype = action.payload.content.htype;\n            const htypeid = action.payload.content.htypeid;\n            delete state[htype][htypeid]\n            const index = state.data.inputScreen.user[htype].indexOf(htypeid);\n            delete state.data.inputScreen.user[htype][index]\n            return state\n        }\n        case HEADLINE: {\n            const headline = action.payload.content.headline\n            const htype = action.payload.content.type\n            const htypeid = action.payload.content.selectedHtypeId\n            const dispatch = action.payload.content.dispatch\n            console.log(headline)\n            switch (dispatch) {\n                case (\"ADD_HEADLINE\"): {\n                    //create the id because it has not been changed before\n                    const headlineId = \"HL_\" + uuid\n                    //rebuilding the state object to add new data\n                    console.log(state)\n                    return {\n                        ...state,\n                        selectedComponentId: headlineId,\n                        [htype]: {\n                            ...state[htype],\n                            [htypeid]: {\n                                ...state[htype][htypeid],\n                                order: [...state[htype][htypeid].order, headlineId],\n                                components: {\n                                    ...state[htype][htypeid].components,\n                                    [headlineId]: {\n                                        id: headlineId,\n                                        type: \"HEADLINE\",\n                                        headline: headline\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                //case where you want to change the headline but it already exists\n                case (\"UPDATE_HEADLINE\"): {\n                    const headlineId = action.payload.content.selectedComponentId\n                    return {\n                        ...state,\n                        [htype]: {\n                            ...state[htype],\n                            [htypeid]: {\n                                ...state[htype][htypeid],\n                                components: {\n                                    ...state[htype][htypeid].components,\n                                    [headlineId]: {\n                                        id: headlineId,\n                                        type: \"HEADLINE\",\n                                        headline: headline\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case (UPDATE_COMPONENTS_ORDER): {\n            const newOrder = action.payload.content.newOrder\n            const htype = action.payload.content.htype\n            const htypeId = action.payload.content.htypeId\n            return {\n                ...state,\n                [htype]: {\n                    ...state[htype],\n                    [htypeId]: {\n                        ...state[htype][htypeId],\n                        order: newOrder,\n                    }\n                }\n            }\n        };\n\n    }\n}\n\n\n\n\n    /*    case (INITIALIZE_INPUTSCREEN): {\n            console.log(action.payload.content)\n            const { id } = action.payload.content.htype\n            const { components } = action.payload.content\n            let content = {}\n            content = components.reduce((result, attri, index) => {\n                if (attri != \"\") {\n                    result[attri.id] = attri;\n                } //a, b, c\n                return result;\n            }, {})\n            return {\n                ...state,\n                selectedHtypeId: id,\n                components: content\n            }\n        }\n        default:\n            return state;\n    }\n\n\n\n/*\n        case HEADLINE: {\n            const headline = action.payload.content.headline\n            const htype = action.payload.content.type\n            const routeId = action.payload.content.routeId\n            switch(dispatch){\n                case(\"ADD_HEADLINE\"):{\n                //create the id because it has not been changed before\n                const headlineId = htype.toLowerCase().substring(0, 2) + \"_\" + nanoid(8)\n                //rebuilding the state object to add new data\n                return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        order:[...state.data.route[routeId].order, headlineId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            [headlineId]:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                //case where you want to change the headline but it already exists\n                case(\"UPDATE_HEADLINE\"):{\n                    const headlineId = action.payload.content.headlineId\n                    return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            []:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n\n        case CLEAN_NONSAVED_HTYPES:{\n                    const htypes = [\"ROUTES\",\"STOPS\",\"POIS\"]\n                   // const htype= action.payload.content.headline\n                    for(var j in htypes){\n                    \n                            for(let [key] of Object.entries(state[htypes[j]])){\n                            if(state[htypes[j]][key].saved !=true){\n                                delete state[htypes[j]][key];\n                            }\n                            }\n                        }\n                    return state;\n                } */","import { combineReducers } from \"redux\";\nimport ui from \"./uiReducer\";\nimport data from \"./dataReducer\";\n\nexport default combineReducers({ data,ui});\n","import {\n    REMOVE_ROUTE, UPDATE_ROUTE_STATE,\n    INITIALIZE_INPUT_SCREEN_UI,\n\n    UPDATE_SIMULATOR_SELECTION,\n    STOP_AND_POI_MANAGER_CONTROLLER,\n    SET_TITLE,\n\n    UPDATE_ROUTEMGMT_STATE,\n    LOAD_STOP_AND_POI_MANAGER_STATE,\n    UPDATE_INPUT_SCREEN_STATE,\n    UPDATE_SIMULATOR_SELECTION_STATE,\n\n\n\n} from \"../actions/types\";\n\n/*simulator states\n*/\n\n\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_ROUTEMGMT_STATE: {\n            const selectedId = action.payload.content.selectedId\n            const htype = action.payload.content.htype\n            let managerUiCode = \"RO\"\n            let selectedroutes = \"\"\n            let selectedstops = \"\"\n            let selectedpois = \"\"\n            if (htype == \"routes\" && state.routeMgmt.selector.selectedroutes != selectedId) {\n                managerUiCode = \"ROST\"\n                selectedroutes = selectedId\n                selectedstops = \"\"\n                selectedpois = \"\"\n            } else if (htype == \"routes\" && state.routeMgmt.selector.selectedroutes == selectedId) {\n                managerUiCode = \"RO\"\n                selectedroutes = \"\"\n                selectedstops = \"\"\n                selectedpois = \"\"\n            } else if (htype == \"stops\" && state.routeMgmt.selector.selectedstops != selectedId) {\n                managerUiCode = \"ROSTPO\"\n                selectedroutes = state.routeMgmt.selector.selectedroutes\n                selectedstops = selectedId\n                selectedpois = \"\"\n            } else if (htype == \"stops\" && state.routeMgmt.selector.selectedstops == selectedId) {\n                managerUiCode = \"ROST\"\n                selectedroutes = state.routeMgmt.selector.selectedroutes\n                selectedstops = \"\"\n                selectedpois = \"\"\n            } else if (htype == \"pois\" && state.routeMgmt.selector.selectedpois != selectedId) {\n                managerUiCode = \"ROSTPO\"\n                selectedroutes = state.routeMgmt.selector.selectedroutes\n                selectedstops = state.routeMgmt.selector.selectedstops\n                selectedpois = selectedId\n            } else if (htype == \"pois\" && state.routeMgmt.selector.selectedpois == selectedId) {\n                managerUiCode = \"ROSTPO\"\n                selectedroutes = state.routeMgmt.selector.selectedroutes\n                selectedstops = state.routeMgmt.selector.selectedstops\n                selectedpois = \"\"\n            }\n\n            return {\n                ...state,\n                routeMgmt: {\n                    ...state.routeMgmt,\n                    selector: {\n                        ...state.routeMgmt.selector,\n                        selectedroutes: selectedroutes,\n                        selectedstops: selectedstops,\n                        selectedpois: selectedpois,\n                        managerUiCode: managerUiCode\n\n                    }\n                }\n            }\n        }\n\n        case LOAD_STOP_AND_POI_MANAGER_STATE: {\n            if (state.routeMgmt.selector.managerUiCode != \"MA\") {\n                const htype = action.payload.content.htype\n                return {\n\n                    ...state,\n                    routeMgmt: {\n                        ...state.routeMgmt,\n                        selector: {\n                            ...state.routeMgmt.selector,\n                            lastManagerUiCode: state.routeMgmt.selector.managerUiCode,\n                            htype: htype,\n                            managerUiCode: \"MA\",\n                        }\n\n                    }\n                }\n            } else {\n                return {\n                    ...state,\n                    routeMgmt: {\n                        ...state.routeMgmt,\n                        selector: {\n                            ...state.routeMgmt.selector,\n                            managerUiCode: state.routeMgmt.selector.lastManagerUiCode,\n                        }\n                    }\n                }\n            }\n        }\n        //--------------------------------------------------- update --------------------------------------------------\n        case UPDATE_INPUT_SCREEN_STATE: {\n            const selectedDispatch = action.payload.content\n            return {\n                ...state,\n                inputScreen: {\n                    ...state.inputScreen,\n                    inputMenu: {\n                        ...state.inputScreen.inputMenu,\n                        //which component is shown in the menu //menu, headline input, image gallery etc.\n\n                        show: selectedDispatch\n                    }\n                }\n            }\n        }\n        case UPDATE_SIMULATOR_SELECTION_STATE: {\n            const selectedComponentId = action.payload.content.selectedComponentId\n            const input = action.payload.content.input\n            if (input == \"YES\") {\n                return {\n                    ...state,\n                    inputScreen: {\n                        ...state.inputScreen,\n                        simulator: {\n                            ...state.inputScreen.simulator,\n                            selectedComponentId: selectedComponentId,\n                        }\n                    }\n                }\n            } else {\n                if (state.inputScreen.simulator.selected == selectedComponentId) {\n                    return {\n                        ...state,\n                        inputScreen: {\n                            ...state.inputScreen,\n                            simulator: {\n                                ...state.inputScreen.simulator,\n                                selectedComponentId: \"empty\",\n                            }\n                        }\n                    }\n                }\n                else {\n                    return {\n                        ...state,\n                        inputScreen: {\n                            ...state.inputScreen,\n                            simulator: {\n                                ...state.inputScreen.simulator,\n                                selectedComponentId: selectedComponentId,\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n\n\n\n        default:\n            return state\n    }\n\n}\n\n\n\n\nconst initialState = {\n\n    routeMgmt: {\n        selector: {\n            lastManagerUiCode: \"\",\n            selectedroutes: \"\",\n            selectedstops: \"\",\n            selectedpois: \"\",\n            managerUiCode: \"RO\",\n            htype: \"\",\n        },\n        columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n        title: \"\",\n    },\n    inputScreen: {\n        inputMenu: {\n            htype: \"routes\",\n            //which component is shown in the menu\n            show: \"MENU\",\n            routes: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n            { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\", type:\"SUBHEADLINE\" },\n            { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\", type:\"IMAGE_GALLERY\" },\n            ],\n            stops: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n            { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\",type:\"SUBHEADLINE\" },\n            { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\",type:\"IMAGE_GALLERY\"  },\n            ],\n            pois: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n            { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\", type:\"SUBHEADLINE\" },\n            { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\",type:\"IMAGE_GALLERY\"},\n            ]\n        },\n        simulator: {\n            show: \"routes\",\n            selected: \"empty\"\n        },\n\n\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        //----------------------------------------------\n/*\n\n        case STOP_AND_POI_MANAGER_CONTROLLER: {\n            if (state.routeMgmt.selector.managerUiCode != \"MA\") {\n                const htype = action.payload.content.htype\n                return {\n                    ...state,\n                    selector: {\n                        ...state.selector,\n                        lastManagerUiCode: state.selector.managerUiCode,\n                        htype: htype,\n                        managerUiCode: \"MA\",\n                    }\n                }\n            } else {\n                return {\n                    ...state,\n                    selector: {\n                        ...state.selector,\n                        managerUiCode: state.selector.lastManagerUiCode,\n                    }\n                }\n            }\n        }\n\n        case SET_TITLE: {\n            const title = action.payload.content.title\n            return {\n                ...state,\n                title: title\n            }\n        }\n\n\n        case INITIALIZE_INPUT_SCREEN_UI: {\n            const selectedDispatch = action.payload.content.dispatch\n            return {\n                ...state,\n                menu: {\n                    ...state.inputMenu,\n                    //menu for what kind of hierarchy type\n                    htype: selectedDispatch,\n                    //which component is shown in the menu //menu, headline input, image gallery etc.\n                    show: \"MENU\",\n                }\n\n            };\n        }\n        case UPDATE_INPUT_SCREEN_UI: {\n            const selectedDispatch = action.payload.content\n            return {\n                ...state,\n                inputMenu: {\n                    ...state.inputMenu,\n                    //which component is shown in the menu //menu, headline input, image gallery etc.\n\n                    show: selectedDispatch\n\n                }\n            }\n        }\n        case REMOVE_ROUTE: {\n            const index = action.payload.content.removeIndex\n            const columnId = action.payload.content.removeColumn;\n\n            return {\n                ...state,\n                ids: state.columns[columnId].ids.splice(index, 1),\n            }\n        };\n        case UPDATE_ROUTE_STATE: {\n            const newOrder = action.payload.content.newOrder\n            const columnId = action.payload.content.columnId\n            return {\n                ...state,\n                //   routeIds: newOrder,\n                columns: {\n                    ...state.columns,\n                    [columnId]: {\n                        ...state.columns[columnId],\n                        ids: newOrder\n                    },\n                }\n            }\n        };\n        case UPDATE_SIMULATOR_SELECTION: {\n            const selectedComponentId = action.payload.content.selectedComponentId\n            const input = action.payload.content.input\n            if (input == \"YES\") {\n                return {\n                    ...state,\n                    simulator: {\n                        ...state.simulator,\n                        selected: selectedComponentId,\n                    }\n                }\n            } else {\n                if (state.simulator.selected == selectedComponentId) {\n                    return {\n                        ...state,\n                        simulator: {\n                            ...state.simulator,\n                            selected: \"empty\",\n                        }\n                    }\n                }\n                else {\n                    return {\n                        ...state,\n                        simulator: {\n                            ...state.simulator,\n                            selected: selectedComponentId,\n\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n*/","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { initializeStore } from './store'\nimport App from 'next/app'\n\n\n\nexport const withRedux = (PageComponent, { ssr = true } = {}) => {\n  const WithRedux = ({ initialReduxState, ...props }) => {\n    const store = getOrInitializeStore(initialReduxState)\n\n    return (\n      <Provider store={store}>\n        <PageComponent {...props} />\n      </Provider>\n    )\n  }\n\n  // Make sure people don't use this HOC on _app.js level\n  if (process.env.NODE_ENV !== 'production') {\n    const isAppHoc =\n      PageComponent === App || PageComponent.prototype instanceof App\n    if (isAppHoc) {\n      throw new Error('The withRedux HOC only works with PageComponents')\n    }\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    WithRedux.displayName = `withRedux(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithRedux.getInitialProps = async context => {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrInitializeStore()\n\n      // Provide the store to getInitialProps of pages\n      context.reduxStore = reduxStore\n\n      // Run getInitialProps from HOCed PageComponent\n      const pageProps =\n        typeof PageComponent.getInitialProps === 'function'\n          ? await PageComponent.getInitialProps(context)\n          : {}\n\n      // Pass props to PageComponent\n      return {\n        ...pageProps,\n        initialReduxState: reduxStore.getState(),\n      }\n    }\n  }\n\n  return WithRedux\n}\n\nlet reduxStore\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (typeof window === 'undefined') {\n    return initializeStore(initialState)\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState)\n  }\n\n  return reduxStore\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n//export default createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n//export default createStore(rootReducer, applyMiddleware(thunk));\n\n\n//import rootReducer from './reducers'\n\nconst initialState = {\n  data: {\n    routeMgmt: {\n      user: {\n        name: \"\",\n        routes: [],\n        stops: [],\n        pois: [],\n        email: \"\",\n      },\n      routes: {},\n      stops: {},\n      pois: {},\n    },\n    inputScreen: {\n      user: {\n        name: \"\",\n        routes: [],\n        stops: [],\n        pois: [],\n      },\n      selectedHtypeId: \"\",\n      selectedComponentId: \"empty\",\n      // htype: {},\n      components: {},\n    },\n  },\n  ui: {\n    routeMgmt: {\n      selector: {\n        lastManagerUiCode: \"\",\n        selectedroutes: \"\",\n        selectedstops: \"\",\n        selectedpois: \"\",\n        managerUiCode: \"RO\",\n        htype: \"\",\n      },\n      columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n      title: \"\",\n    },\n    inputScreen: {\n      inputMenu: {\n        htype: \"routes\",\n        //which component is shown in the menu\n        show: \"MENU\",\n        routes: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n        { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\", type:\"SUBHEADLINE\" },\n        { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\", type:\"IMAGE_GALLERY\" },\n        ],\n        stops: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n        { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\",type:\"SUBHEADLINE\" },\n        { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\",type:\"IMAGE_GALLERY\"  },\n        ],\n        pois: [{ name: \"Headline\", id: \"headlineInput\", dispatch: \"HEADLINE_INPUT\", type:\"HEADLINE\" },\n        { name: \"Subheadline\", id: \"subheadlineInput\", dispatch: \"SUBHEADLINE_INPUT\", type:\"SUBHEADLINE\" },\n        { name: \"Image Gallery\", id: \"imageGalleryInput\", dispatch: \"IMAGE_GALLERY_INPUT\",type:\"IMAGE_GALLERY\"},\n        ]\n      },\n      simulator: {\n        show: \"routes\",\n        selected: \"empty\"\n      },\n    }\n\n  }\n}\n\n\n//const persistedReducer = persistReducer(persistConfig, rootReducer)\nexport const initializeStore = (preloadedState = initialState) => {\n  let store;\n  const isClient = typeof window !== 'undefined';\n  if (isClient) {\n    store = createStore(\n      rootReducer,\n      preloadedState,\n      composeWithDevTools(applyMiddleware(thunk))\n    );\n    //store.__PERSISTOR = persistStore(store);\n  } else {\n    store = createStore(\n      rootReducer,\n      preloadedState,\n      composeWithDevTools(applyMiddleware(thunk))\n    );\n  }\n  //export const Store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\n  //export const persistor = persistStore(initialState);\n\n  return store\n}\n\n/*\n\nexport default () => {\n  let initializeStore = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\n  let persistor = persistStore(store)\n  return { initializeStore, persistor }\n}\n\n*/","import styled from 'styled-components'\nimport MenuItem from '../components/homepage-components/list-menu';\nimport { withApollo } from '../lib/apollo';\nimport gql from 'graphql-tag'\n\nimport React from 'react';\nimport { useState } from 'react';\nimport Router from 'next/router'\nimport {useMutation } from '@apollo/react-hooks';\nimport redirect from '../lib/redirect';\nimport checkLoggedIn from './../lib/check-login'\nimport { loadUser } from '../lib/redux/actions/dataActions';\nimport { connect } from 'react-redux';\nimport { withRedux } from '../lib/redux/redux';\nimport { compose } from 'redux';\n\n\n\nconst Home = (props) => {\n  //const client = useApolloClient()\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage,setError] = useState('')\n  const SIGN_IN = gql`\n  mutation Signin($email: String!, $password: String!) {\n    login(email: $email, password: $password ) {\n      user{id name routes stops pois email}\n    }\n  }`\n  const onCompleted = data => {\n  //  client.cache.reset().then(() => {\n  //    redirect({}, '/')\n  //  })\n    //console.log(data)\n\n    props.loadUser(data)\n    Router.push({\n      pathname: '/routemanagement',\n    })\n\n  }\n\n  const onError = error => {\n    // If you want to send error to external service?\n    console.log(error)\n\n    setError(error.message)\n  }\n  const [signinUser, { error }] = useMutation(SIGN_IN, {\n    onCompleted,\n    onError,\n  })\n  return (\n    <Wrapper>\n    <HeaderImage src=\"/logo_fible.png\" alt=\"my image\" />\n    <StyledInputRow>\n      <StyledText>Email:</StyledText>\n      <StyledInput type=\"text\" name=\"email\" value={email} onChange={e => setEmail((e.target as HTMLInputElement).value)} />\n    </StyledInputRow>\n    <StyledInputRow>\n      <StyledText>Password:</StyledText>\n      <StyledInput type=\"password\"  name=\"password\" value={password} onChange={e => setPassword((e.target as HTMLInputElement).value)} />\n    </StyledInputRow>\n    <StyledButton onClick={() => {\n    signinUser({\n      variables: {\n        email: email,\n        password: password\n      },\n    }) //setEmail(''), setPassword('')\n    }}>Log in</StyledButton>\n    {errorMessage != '' ? <StyledError>Wrong password!</StyledError>:null}\n  </Wrapper>\n\n  )\n}\n//        <MenuItem page=\"/routemanagement\" name=\"Routes\" />\n\n\n\nconst mapStateToProps = state => {\n  return { loadUser: state.loadUser };\n};\nconst enhance = compose(\n  withRedux,\n  withApollo,\n  connect(mapStateToProps, {loadUser}),\n)\nexport default enhance(Home)\n\n\nconst Wrapper = styled.div`\n  position: absolute;\n  left:50vw;\n  translate:-50%;\n  background: white;\n  height: 100%;\n  width:40%;\n  display:flex;\n  flex-direction:column;\n  transform: translate(-50%, 0); \n  \n`;\n\nconst HeaderImage = styled.img`\n    padding: 10vh;\n    max-height:15vh;\n    height: auto;\n    width:auto;\n    align-self:center;\n    object-fit: cover; \n`\n\n\nconst StyledInputRow = styled.div`\n  display:flex;\n  width:60%;\n  padding:2vh;\n  flex-direction:row;\n  align-self:center;\n`\nconst StyledText = styled.h3`\n  align-self:flex-start;\n  margin:0;\n  padding:0;\n\n`\n\nconst StyledError = styled.h3`\nwidth:60%;\npadding:2vh;\nalign-self:center;\ntext-align:center;\nfont-weight:bold;\nfont-size:2.5vh;\ncolor:salmon;\n`\nconst StyledInput = styled.input`\n  display:flex;\n  width:60%;\n  padding:0.5vh;\n  font-size:1.5vh;\n  border: 1px solid;\n  border-color: lightgray;\n  border-radius:1vh;\n  position:absolute;\n  width:16vw;\n  right:10vw;\n  :focus {\n        outline:none;\n        caret-color:salmon;\n    }\n\n\n`\nconst StyledButton = styled.button`\n    align-self:center;\n    color:white;\n    border:0;\n    width:8vw;\n    background:salmon;\n    font-size:2vh;\n    font-weight:bold;\n    padding:1vh;\n    padding-left:2vh;\n    padding-right:2vh;\n    border-radius:1vh;\n    text-align:center;\n\n    :focus {\n        outline:none;\n    }\n\n    overflow: hidden;\n    transform: translate3d(0, 0, 0);\n        \n    :after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        pointer-events: none;\n        background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);\n        background-repeat: no-repeat;\n        background-position: 50%;\n        transform: scale(10, 10);\n        opacity: 0;\n        transition: transform .5s, opacity 1s;\n        }\n\n    :active:after {\n        transform: scale(0, 0);\n        opacity: .3;\n        transition: 0s;\n    }\n\n\n`\n\n\n/*\nclass Home extends React.Component<{state:any}> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailValue: '',\n      passwordValue:''\n    };\n  }\n  updateEmailValue(e) {\n    this.setState({\n      emailValue: e.target.value\n    });\n  }\n  updatePasswordValue(e) {\n    this.setState({\n      passwordValue: e.target.value\n    });\n  }\n\n loginHandler = () => {\n  console.log(this.state)\n  const data = this.state.emailValue\n\nrender() {\n  return ( <Wrapper>\n      <List>\n        <HeaderImage src=\"/logo_fible.png\" alt=\"my image\" />\n        <MenuItem page=\"/routemanagement\" name=\"Routes\" />\n          <StyledLabel>\n            Email:\n          <StyledInput type=\"text\" name=\"email\" onChange={(e) => this.updateEmailValue(e)} />\n          </StyledLabel>\n          <StyledLabel>\n            Password:\n          <StyledInput type=\"text\" name=\"password\" onChange={(e) => this.updatePasswordValue(e)} />\n          </StyledLabel>\n          <StyledButton onClick={() => this.loginHandler()}>Log in</StyledButton>\n      </List>\n    </Wrapper>\n  )}\n}\n*/","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@apollo/react-ssr\");","module.exports = require(\"apollo-cache-inmemory\");","module.exports = require(\"apollo-client\");","module.exports = require(\"apollo-link-context\");","module.exports = require(\"apollo-link-http\");","module.exports = require(\"cookie\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"https-proxy-agent\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/head\");","module.exports = require(\"next/router\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");","module.exports = require(\"redux\");","module.exports = require(\"redux-devtools-extension\");","module.exports = require(\"redux-thunk\");","module.exports = require(\"styled-components\");","module.exports = require(\"url\");","module.exports = require(\"uuid/v4\");"],"mappingsrGA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;;;;;;;;;;;;;ACAA;AACA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACrGA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;;;;;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AADA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAHA;AADA;AAOA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AAeA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AAFA;AAFA;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAWA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAJA;AAOA;AAGA;AAGA;AAdA;AAFA;AAqBA;AACA;AAAA;AAAA;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":""}