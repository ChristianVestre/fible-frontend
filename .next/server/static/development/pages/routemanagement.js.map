{"version":3,"file":"static/development/pages/routemanagement.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/from.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-properties.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptor.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptors.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-symbols.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/components/loading-component/rotatingSpinner.tsx","webpack:///./src/components/route-management/selector/selector.tsx","webpack:///./src/components/route-management/selector/selectorItem.tsx","webpack:///./src/components/route-management/selector/selectorManager.tsx","webpack:///./src/components/route-management/stateManager.tsx","webpack:///./src/components/route-management/stopsandpoi-management/spListItem.tsx","webpack:///./src/components/route-management/stopsandpoi-management/spManager.tsx","webpack:///./src/components/route-management/stopsandpoi-management/spSelector.tsx","webpack:///./src/components/route-management/title.tsx","webpack:///./src/components/shared-components/logoutButton.tsx","webpack:///./src/lib/apollo.tsx","webpack:///./src/lib/createFunctions.ts","webpack:///./src/lib/redux/actions/dataActions.ts","webpack:///./src/lib/redux/actions/types.ts","webpack:///./src/lib/redux/actions/uiActions.ts","webpack:///./src/pages/routemanagement.tsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@apollo/react-ssr\"","webpack:///external \"@fortawesome/free-solid-svg-icons\"","webpack:///external \"@fortawesome/react-fontawesome\"","webpack:///external \"apollo-cache-inmemory\"","webpack:///external \"apollo-client\"","webpack:///external \"apollo-link-context\"","webpack:///external \"apollo-link-http\"","webpack:///external \"cookie\"","webpack:///external \"core-js/library/fn/array/from\"","webpack:///external \"core-js/library/fn/json/stringify\"","webpack:///external \"core-js/library/fn/object/assign\"","webpack:///external \"core-js/library/fn/object/define-properties\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptor\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptors\"","webpack:///external \"core-js/library/fn/object/get-own-property-symbols\"","webpack:///external \"core-js/library/fn/object/keys\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"graphql-tag\"","webpack:///external \"https-proxy-agent\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/dynamic\"","webpack:///external \"next/head\"","webpack:///external \"next/router\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-beautiful-dnd\"","webpack:///external \"react-redux\"","webpack:///external \"react-spinners-kit\"","webpack:///external \"styled-components\"","webpack:///external \"uuid/v4\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/routemanagement.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/promise\");","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _Object$assign from \"../../core-js/object/assign\";\nexport default function _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import _Object$getOwnPropertySymbols from \"../../core-js/object/get-own-property-symbols\";\nimport objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (_Object$getOwnPropertySymbols) {\n    var sourceSymbolKeys = _Object$getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import _Object$keys from \"../../core-js/object/keys\";\nexport default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n\n  var sourceKeys = _Object$keys(source);\n\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import styled from 'styled-components'\nimport Link from 'next/link'\nimport { RotateSpinner } from 'react-spinners-kit'\n\n\nexport const GrayRotatingSpinner = props => (\n  <SpinnerContainer>\n  <RotateSpinner color=\"gray\" size={60}/>\n  </SpinnerContainer>\n  );\n\n  const SpinnerContainer = styled.div`\n  position:absolute;  \n  top:50vh;\n  left:50vw;\n  transform: translate(-50%, 0); \n`","import React from 'react';\nimport styled from 'styled-components';\nimport FibleRoute from './selectorItem';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport Router from 'next/router'\nimport { uiInitializeInputScreenUi, uiSetTitle, uiLoadStopAndPoiManagerState } from '../../../lib/redux/actions/uiActions';\nimport { dataLoadInputScreen } from '../../../lib/redux/actions/dataActions';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { createRoute } from '../../../lib/createFunctions';\nimport { DataState } from '../../../types/reduxTypes';\n\n\n\nconst Selector = props => {\n    const [setRoute, { data }] = useMutation(gql`\n    mutation setRoute($route:String!){\n        setRoute(route:$route){\n            id\n        }\n    }`);\n    const dataState = useSelector((state:DataState) => state.data)\n    const dispatch = useDispatch()\n\n    const handleInputScreenButton = async (props) => {\n        console.log(props.type)\n        if (props.type == \"routes\") {\n            const route = createRoute({ user: dataState.user, type: \"routes\" })\n            dispatch(uiInitializeInputScreenUi({ dispatch: props.type }))\n            dispatch(dataLoadInputScreen({ htype: props.type, user: dataState.user, htypeData: { routes:route}, componentsArray: route.components }))\n            await setRoute({ variables: { route: JSON.stringify(route) } })\n            sessionStorage.setItem(\"hid\", route.id)\n            Router.push({\n                pathname: '/inputscreen',\n            })\n        } else {\n            let firstLetter = props.type.substring(0, 1)\n            let rest = props.type.substring(1)\n            let title = firstLetter + rest.toLowerCase() + \" manager\"\n            dispatch(uiLoadStopAndPoiManagerState({ htype: props.type }))\n            dispatch(uiSetTitle({ title: title }))\n        }\n    }\n\n    return (\n        <Container>\n            <Title>{props.type.substring(0, 1).toUpperCase() + props.type.substring(1)}</Title>\n            <Droppable droppableId={props.type}>\n                {provided => (\n                    <RouteList\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                    >\n                        {console.log(props.listItems)}\n                        {props.listItems.map((itemData, index) => <FibleRoute key={itemData.id} type={props.type} itemData={itemData} index={index} />)}\n                        {provided.placeholder}\n                    </RouteList>\n                )}\n            </Droppable>\n            <InputScreenButton onClick={() => handleInputScreenButton(props)} >\n                <FontAwesomeIcon icon={faPlus} />\n            </InputScreenButton>\n        </Container>\n    )\n}\n\nexport default Selector\n\n\nconst Container = styled.div`\n    margin-left:0.5vw;\n    margin-right:0.5vw;\n    border: 1px solid lightgray;\n    border-radius:2em;\n    min-width:20vw;\n    width:100%;\n    height:100%;\n    position: relative;\n\n`\nconst Title = styled.h1`\n    padding:8px;\n`\nconst RouteList = styled.div`\n\n    padding:8px;\n`\n\n\n\nconst InputScreenButton = styled.button`\n    position:absolute;\n    bottom:0;\n    right:0;\n    font-size:6vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n\n    :focus {\n        outline:none;\n    }\n    `","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { uiUpdateRoutemgmtState, uiInitializeSimulatorState } from '../../../lib/redux/actions/uiActions';\nimport Router from 'next/router'\nimport { UiState } from '../../../types/reduxTypes';\nimport { dataSetSelectedHtype } from '../../../lib/redux/actions/dataActions';\n\n\nconst SelectorItem = props => {\n    const uiState = useSelector((state: UiState) => state.ui);\n    const dispatch = useDispatch()\n   /* const [getCompontents, { loading, data }] = useLazyQuery( gql`\n    query getComponents($ids:String)\n    {   getComponents(ids:$ids){\n        id content type\n        }    }\n    `);*/\n\n    const handleEditRoutes = async (e) => {\n\n        e.stopPropagation()\n        e.nativeEvent.stopImmediatePropagation();\n        sessionStorage.setItem(\"hid\",props.itemData.id)\n        const selectedId = props.itemData.id\n        const htype = props.type\n        dispatch(uiInitializeSimulatorState({show:htype}))\n        dispatch(dataSetSelectedHtype({selectedHtype:htype,selectedHtypeId:props.itemData.id}))\n        //const resp = await getCompontents()\n        //props.updateSelectorManagerState({selectedId,htype})\n        Router.push({\n            pathname: '/inputscreen',\n        },\n            //'inputscreen'\n        )\n      //  Router.replace('/routemanagement','/inputscreen')\n    };\n\n    const handleSelectorManagerStateUpdate = (e) => {\n        const selectedId = props.itemData.id\n        const htype = props.type\n        dispatch(uiUpdateRoutemgmtState({ selectedId, htype }))\n\n    }\n    return (\n        <Draggable draggableId={props.itemData.id} index={props.index}>\n            {provided => (\n                <Container\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    onClick={(e) => handleSelectorManagerStateUpdate(e)}\n                    //todo fix state\n                    color={props.itemData.id == uiState.routeMgmt.selector[\"selected\"+ props.type] ? \"salmon\" : \"lightgray\"}\n                >\n                    <Headline>{props.itemData.name}</Headline>\n                    <EditButton onClick={(e) => handleEditRoutes(e)} >\n                        <FontAwesomeIcon icon={faEdit} />\n                    </EditButton>\n                </Container>\n            )\n            }\n        </Draggable>\n    )\n}\n\nexport default SelectorItem;\n\nconst Container = styled.div`\n    position:relative;\n    border: 1px solid;\n    border-color: ${props => props.color};\n    border-radius:2em;\n    padding-top:4vh;\n    padding: 1vw;\n    margin-bottom:2vh;\n    background-color:white;\n    :hover {\n        border-color:rgba(250,128,114 ,0.3 );\n    }\n\n`\n\n\nconst Headline = styled.h3`\n    font-size: 2vh;\n    font-weight:lighter;\n    user-select:none;\n    top:10%;\n    left:5vw;\n    position:relative;\n    margin:0;\n    color:black;\n    border:none;\n    background:none;\n    text-decoration: none;   \n`\n\nconst EditButton = styled.button`\n    position:relative;\n    bottom:3vh;\n    left:98%;\n    font-size:2vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n    transform: translate(-50%, 0); \n\n    cursor: pointer;\n    :focus {\n        outline:none;\n    }\n\n    \n`\n/*\nhandleremovedroutes\n        //prevent select state update aswell\n        e.stopPropagation()\n        var itemId = props.itemData.id\n        //for removing columns when deleting list items\n        var dispatch = props.type == \"STOPS\" ? \"STOP_DESELECT\" : dispatch = \"ROUTE_DESELECT\"\n        var removeIndex = props.index;\n        var removeColumn = props.columnId;\n        props.removeRoute({removeIndex,removeColumn});\n        props.updateSelectorManagerState({itemId,dispatch})\n\n        */","import { DragDropContext } from 'react-beautiful-dnd'\nimport React from 'react';\nimport Selector from './selector';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dataUpdateHtypeOrder, dataUpdateChildHtypeOrder } from '../../../lib/redux/actions/dataActions'\nimport { DataState, UiState } from '../../../types/reduxTypes';\n\n\nconst SelectorManager = props => {\n    const dispatch = useDispatch()\n    const dataState = useSelector((state: DataState) => state.data);\n    const uiState = useSelector((state: UiState) => state.ui);\n    //console.log(props)\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId == source.droppableId &&\n            destination.index == source.index) {\n            return;\n        }\n        //remake probably\n        if (destination.droppableId == source.droppableId) {\n            const htype = source.droppableId;\n            if(source.droppableId == \"routes\"){\n                const newOrder = Array.from(dataState.user[htype]);\n                newOrder.splice(source.index, 1);\n                newOrder.splice(destination.index, 0, draggableId);\n                dispatch(dataUpdateHtypeOrder({ newOrder, htype }))\n            } else{\n                const htypeParent = htype == \"stops\" ? \"routes\" : \"stops\"\n                const newOrder = Array.from(dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][htype]);\n                newOrder.splice(source.index, 1);\n                newOrder.splice(destination.index, 0, draggableId);\n                dispatch(dataUpdateChildHtypeOrder({\n                    newOrder: newOrder,\n                    htype: htype,\n                    parentHtype: htypeParent,\n                    parentHtypeId: uiState.routeMgmt.selector['selected' + htypeParent]\n                }))\n            }\n        }\n    }\n    const selectorFunction = props => {\n        switch (props.type) {\n            case (\"routes\"): {\n                //console.log(props.dataState.routeMgmt.user.routes)\n                const selector = dataState.user.routes;\n                let listItems\n                listItems = selector ? selector.reduce((result, route) => {\n                    if (dataState.routes[route] != undefined) { result.push(dataState.routes[route]) }\n                    return result\n                }, []) : []\n\n                return <Selector key='routes' selector={selector} type=\"routes\" listItems={listItems} />;\n            }\n            case (\"stops\"): {\n                const selector = dataState.routes[uiState.routeMgmt.selector.selectedroutes].stops;\n                let listItems\n                listItems = selector ? selector.reduce((result, stop) => {\n                    if (dataState.stops[stop] != undefined\n                        && dataState.routes[uiState.routeMgmt.selector.selectedroutes] != undefined\n                        && dataState.routes[uiState.routeMgmt.selector.selectedroutes].stops.includes(stop)) { result.push(dataState.stops[stop]) }\n                    return result\n                }, []) : []\n                return <Selector key='stops' selector={selector} type=\"stops\" listItems={listItems} />;\n            }\n            case (\"pois\"): {\n                const selector = dataState.stops[uiState.routeMgmt.selector.selectedstops].pois;\n                let listItems\n                console.log(dataState.stops[uiState.routeMgmt.selector.selectedstops])\n                listItems = selector ? selector.reduce((result, poi) => {\n                    console.log(poi)\n                    if (dataState.pois[poi] != undefined\n                        && dataState.stops[uiState.routeMgmt.selector.selectedstops] != undefined\n                        && dataState.stops[uiState.routeMgmt.selector.selectedstops].pois.includes(poi)) { result.push(dataState.pois[poi]) }\n                    return result\n                }, []) : []\n                return <Selector key='pois' selector={selector} type=\"pois\" listItems={listItems} />;\n            }\n            default: return <p>wrong</p>\n        }\n    }\n    return (<DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n        {selectorFunction(props)}\n    </DragDropContext>)\n}\n\nexport default SelectorManager\n\n","import styled from 'styled-components';\nimport React from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Selector from './selector/selectorManager';\nimport StopsAndPois from './stopsandpoi-management/spManager'\nimport { UiState } from '../../types/reduxTypes';\n\n\n\n\nconst RouteManagementStateManager = props => {\n    const uiState = useSelector((state: UiState) => state.ui);\n\n    const SelectorChoice = (props) => {\n        //   console.log(props.state.htypes.getRoutes)\n        switch (uiState.routeMgmt.selector.managerUiCode) {\n            case (\"RO\"): {\n                return <OneSelectorWrapper>\n                    <Selector type=\"routes\" />\n                </OneSelectorWrapper>\n            }\n            case (\"ROST\"): {\n                return <TwoSelectorsWrapper>\n                    <Selector type=\"routes\" />\n                    <Selector type=\"stops\" />\n                </TwoSelectorsWrapper>\n            }\n            case (\"ROSTPO\"): {\n                return <ThreeSelectorsWrapper>\n                    <Selector type=\"routes\" />\n                    <Selector type=\"stops\" />\n                    <Selector type=\"pois\" />\n                </ThreeSelectorsWrapper>\n            }\n            case (\"MAST\"): {\n                return <ManagerWrapper>\n                    <StopsAndPois type=\"stops\" />\n                </ManagerWrapper>\n            }\n            case (\"MAPO\"): {\n                return <ManagerWrapper>\n                    <StopsAndPois type=\"pois\" />\n                </ManagerWrapper>\n            }\n            default: {\n                return <OneSelectorWrapper>\n                    <Selector type=\"routes\" />\n                </OneSelectorWrapper>\n            }\n        }\n    }\n\n    return (\n        <Container>\n            {SelectorChoice(props)}\n        </Container>\n    )\n}\n\n\n//export default RouteManagementStateManager\nexport default RouteManagementStateManager;\nconst Container = styled.div`\n    width:100vw;\n    height:80vh;\n    position:absolute;\n    bottom:5vh;\n`\nconst OneSelectorWrapper = styled.div`\n    position:relative;\n    width:30vw;\n    left:35vw;\n    height:100%;\n    margin:0;\n    padding:0;\n    align-content:center;\n    display:flex;\n    flex-direction:row;\n`\n\nconst TwoSelectorsWrapper = styled.div`\n    position:relative;\n    left:20vw;\n    width:60vw;\n    height:100%;\n    margin:0;\n    padding:0;\n    align-content:center;\n    justify-content:center;\n    display:flex;\n    flex-direction:row;\n`\nconst ThreeSelectorsWrapper = styled.div`\n    position:relative;\n    margin:0;\n    padding:0;\n    width:90vw;\n    height:100%;\n    left:5vw;\n    align-content:center;\n    display:flex;\n    flex-direction:row;\n`\nconst ManagerWrapper = styled.div`\n    position:relative;\n    margin:0;\n    padding:0;\n    width:90vw;\n    height:100%;\n    left:5vw;\n    align-content:center;\n    justify-content:center;\n    display:flex;\n    flex-direction:row;\n    border: 1px solid lightgray;\n    border-radius:0.5vh;\n    top:0;\n\n\n\n`","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { uiUpdateRoutemgmtState, uiInitializeSimulatorState } from '../../../lib/redux/actions/uiActions';\nimport Router from 'next/router'\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { UiState } from '../../../types/reduxTypes';\n\n\nconst SelectorItem = props => {\n    const uiState = useSelector((state: UiState) => state.ui);\n    const dispatch = useDispatch()\n    const [getHtypeWithComponents, { loading, data }] = useLazyQuery(gql`query getHtypeWithComponents\n                {   getHtypeWithComponents{\n                        htype{\n                            route{id name ownerid components}\n                            stop{id name ownerid components}\n                            poi{id name ownerid components}\n                        } \n                        components{id content type}}\n                }`);\n\n    const handleEditRoutes = async (e) => {\n\n        e.stopPropagation()\n        e.nativeEvent.stopImmediatePropagation();\n        sessionStorage.setItem(\"hid\", props.itemData.id)\n        // Cookie.\n        const selectedId = props.itemData.id\n        const htype = props.type\n        dispatch(uiInitializeSimulatorState({show:htype}))\n      //  const resp = await getHtypeWithComponents()\n        props.uiUpdateSelectorManagerState({selectedId,htype})\n        Router.push({\n            pathname: '/inputscreen',\n        },\n            //'inputscreen'\n        )\n        //  Router.replace('/routemanagement','/inputscreen')\n    };\n\n    const handleSelectorManagerStateUpdate = (e) => {\n        const selectedId = props.itemData.id\n        const htype = props.type\n        dispatch(uiUpdateRoutemgmtState({ selectedId, htype }))\n\n    }\n    return (\n        <Draggable draggableId={props.itemData.id} index={props.index}>\n            {provided => (\n                <Container\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    onClick={(e) => handleSelectorManagerStateUpdate(e)}\n                    //todo fix state\n                    color={props.itemData.id == uiState.routeMgmt.selector[\"selected\" + props.type] ? \"salmon\" : \"lightgray\"}\n                >\n                    <Headline>{props.itemData.name}</Headline>\n                    <EditButton onClick={(e) => handleEditRoutes(e)} >\n                        <FontAwesomeIcon icon={faEdit} />\n                    </EditButton>\n                </Container>\n            )\n            }\n        </Draggable>\n    )\n}\n\nexport default SelectorItem;\n\nconst Container = styled.div`\n                position:relative;\n                border: 1px solid;\n                border-color: ${props => props.color};\n                border-radius:2em;\n                padding-top:4vh;\n                padding: 1vw;\n                margin-bottom:2vh;\n                background-color:white;\n                :hover {\n                    border-color:rgba(250,128,114 ,0.3 );\n                }\n            \n            `\n\n\nconst Headline = styled.h3`\n                font-size: 2vh;\n                font-weight:lighter;\n                user-select:none;\n                top:10%;\n                left:5vw;\n                position:relative;\n                margin:0;\n                color:black;\n                border:none;\n                background:none;\n                text-decoration: none;   \n            `\n\nconst EditButton = styled.button`\n                position:relative;\n                bottom:3vh;\n                left:98%;\n                font-size:2vh;\n                border:0;\n                color:none;\n                background-color:transparent;\n                transform: translate(-50%, 0); \n            \n                cursor: pointer;\n                :focus {\n                    outline:none;\n                }\n            \n                \n            `","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faPlus} from '@fortawesome/free-solid-svg-icons'\nimport { uiInitializeInputScreenUi, uiLoadStopAndPoiManagerState } from '../../../lib/redux/actions/uiActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport SandpSelector from './spSelector';\nimport { DataState, UiState } from '../../../types/reduxTypes';\nimport { dataLoadInputScreen, dataUpdateChildHtypeOrder, dataUpdateHtypeOrder } from '../../../lib/redux/actions/dataActions';\nimport { createStop, createPoi } from '../../../lib/createFunctions';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport dynamic from 'next/dynamic';\n\n\n\nconst StopsAndPois = props => {\n    const [setStop] = useMutation(gql`\n    mutation setStop($stop:String!){\n        setStop(stop:$stop){\n            id\n        }\n    }`);\n    const [setPoi] = useMutation(gql`\n    mutation setPoi($poi:String!){\n        setPoi(poi:$poi){\n            id\n        }\n    }`);\n    const [updateHtype] = useMutation(gql`\n    mutation updateHtype($htype:String!){\n        updateHtype(htype:$htype)\n    }`);\n    const [updateUser] = useMutation(gql`\n    mutation updateUser($user:String!){\n        updateUser(user:$user)\n    }`);\n\n    const dataState = useSelector((state: DataState) => state.data);\n    const uiState = useSelector((state: UiState) => state.ui);\n    const dispatch = useDispatch()\n\n\n    const htypeParent = props.type == \"stops\" ? \"routes\" : \"stops\"\n    //const allList = dataState.user[props.type].map((element) => dataState[props.type][element])\n    const allList = dataState.user[props.type].reduce((result, item) => {\n        if (dataState[props.type][item] != undefined\n            && dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][props.type] != undefined\n            && !dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][props.type].includes(item)) { result.push(dataState[props.type][item]) }\n        return result\n    }, [])\n    //filters the list to the stops/pois that belongs to the route/stop\n    const filteredList = dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][props.type].reduce((result, item) => {\n        if (dataState[props.type][item] != undefined\n            && dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][props.type] != undefined\n            && dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]][props.type].includes(item)) {\n            result.push(dataState[props.type][item])\n        }\n        return result\n    }, [])\n    let htype\n    const handleInputScreenButton = async () => {\n        if (props.type == \"stops\") {\n            htype = createStop({ user: dataState.user, type: \"stops\" })\n            await setStop({ variables: { stop: JSON.stringify(htype) } })\n            sessionStorage.setItem(\"hid\", htype.id)\n        } else {\n            htype = createPoi({ user: dataState.user, type: \"pois\" })\n            await setPoi({ variables: { poi: JSON.stringify(htype) } })\n            sessionStorage.setItem(\"hid\", htype.id)\n        }\n        dispatch(uiInitializeInputScreenUi({ dispatch: props.type }))\n        dispatch(dataLoadInputScreen({ htype: props.type, user: dataState.user, htypeData: { [props.type]: htype}, componentsArray: htype.components }))\n        Router.push({\n            pathname: '/inputscreen',\n        })\n    }\n\n    const handleBackButton = async () => {\n        dispatch(uiLoadStopAndPoiManagerState({ htype: props.type }))\n    }\n\n    const onDragEnd = (result) => {\n        console.log(result)\n        const htype = props.type + \"s\"\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId == source.droppableId &&\n            destination.index == source.index) {\n            return;\n        }\n        if (destination.droppableId == source.droppableId) {\n            if (destination.droppableId === \"ALL\") {\n                const newOrder = Array.from(dataState.user[props.type]);\n                newOrder.splice(source.index, 1);\n                newOrder.splice(destination.index, 0, draggableId);\n                dispatch(dataUpdateHtypeOrder({\n                    newOrder: newOrder,\n                    htype: props.type\n                }))\n                updateUser({variables:{user:JSON.stringify({...dataState.user, [htype]:newOrder})}})\n            } else if (destination.droppableId == \"SELECTED\") {\n                const newOrder = Array.from(\n                    dataState[htypeParent]\n                    [uiState.routeMgmt.selector['selected' + htypeParent]]\n                    [htype]);\n                newOrder.splice(source.index, 1);\n                newOrder.splice(destination.index, 0, draggableId);\n                dispatch(dataUpdateChildHtypeOrder({\n                    newOrder: newOrder,\n                    htype: htype,\n                    parentHtype: htypeParent,\n                    parentHtypeId: uiState.routeMgmt.selector['selected' + htypeParent]\n                }))\n                updateHtype({variables:{htype:JSON.stringify({...dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]],[htype]:newOrder})}})\n            }\n        } else {\n            const userOrder = Array.from(dataState.user[htype]);\n            const htypeOrder = Array.from(\n                dataState[htypeParent]\n                [uiState.routeMgmt.selector['selected' + htypeParent]]\n                [htype]);\n            if (source.droppableId == \"ALL\") {\n                userOrder.splice(source.index, 1);\n            } else {\n                htypeOrder.splice(source.index, 1);\n            }\n            if (destination.droppableId == \"ALL\") {\n                userOrder.splice(destination.index, 0, draggableId);\n            } else {\n                htypeOrder.splice(destination.index, 0, draggableId);\n            }\n        /*    dispatch(dataUpdateHtypeOrder({\n                newOrder: userOrder,\n                htype: props.type\n            }))*/\n            dispatch(dataUpdateChildHtypeOrder({\n                newOrder: htypeOrder,\n                htype: props.type,\n                parentHtype: htypeParent,\n                parentHtypeId: uiState.routeMgmt.selector['selected' + htypeParent]\n            }))\n            updateHtype({variables:{htype:JSON.stringify({...dataState[htypeParent][uiState.routeMgmt.selector['selected' + htypeParent]],[htype]:htypeOrder})}})\n        }\n    }\n\n    return (\n        <DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n            <BackButton onClick={handleBackButton} >\n                <FontAwesomeIcon icon={faTimes} />\n            </BackButton>\n            <InputScreenButton onClick={handleInputScreenButton} >\n                <FontAwesomeIcon icon={faPlus} />\n            </InputScreenButton>\n            <SandpSelector type=\"ALL\" list={allList}></SandpSelector>\n            <SandpSelector type=\"SELECTED\" list={filteredList}></SandpSelector>\n        </DragDropContext>\n\n\n    )\n}\n\n\nexport default dynamic(() => Promise.resolve(StopsAndPois), {\n    ssr: false\n})\n\nconst InputScreenButton = styled.button`\n    position:absolute;\n    bottom:2%;\n    right:50%;\n    transform: translate(50%,0);\n    font-size:10vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n\n    :focus {\n        outline:none;\n    }\n`\n\nconst BackButton = styled.button`\nposition:absolute;\ntop:2%;\nright:5%;\ntransform: translate(50%,0);\nfont-size:5vh;\nborder:0;\ncolor:none;\nbackground-color:transparent;\n\n:focus {\n    outline:none;\n}\n`","import styled from 'styled-components';\nimport React from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport { dataUpdateComponentsOrder } from '../../../lib/redux/actions/dataActions'\nimport ListItem from './spListItem';\nimport { UiState } from '../../../types/reduxTypes';\nimport dynamic from 'next/dynamic';\n\n\n\nconst  SPSelector = props => {\n  const uiState = useSelector((state:UiState) => state.ui)  \n\n  const titleHandler = () => {\n    const htypeParentLookup = {stops:\"route\",\n    pois:\"stop\"\n    }\n    let title = \"\"\n    if(props.type ==\"ALL\"){\n      title = uiState.routeMgmt.selector.htype.toLowerCase() +  \" library\"\n    } else {\n      title = uiState.routeMgmt.selector.htype.toLowerCase() +  \" in \" + htypeParentLookup[uiState.routeMgmt.selector.htype]\n    }\n    return title\n  }\n\n    return (<ContainerStyled>\n      <TitleStyle>{titleHandler()}</TitleStyle>\n      <Droppable droppableId={props.type}>\n        {provided => (\n          <SandpContainerStyled\n            ref={provided.innerRef}\n            {...provided.droppableProps}>\n            {\n              props.list.map((elem,index) => <ListItem key={elem.id} itemData={elem} index={index} headline={elem.name}/>)\n            }\n            {provided.placeholder}\n          </SandpContainerStyled>\n\n        )}\n      </Droppable>\n    </ContainerStyled>)\n  }\n\n  export default dynamic(() => Promise.resolve(SPSelector), {\n    ssr: false\n})\n\n\n\nconst ContainerStyled = styled.div`\n  width:30vw;\n  height: 88%;\n  align-self:center;\n  justify-self:flex-end;\n  display:flex;\n  align-content:center;\n  justify-content:center;\n  margin-left:5vw;\n  margin-right:5vw;\n`\n\nconst SandpContainerStyled = styled.div`\n    background-color:white;\n    margin:1em;\n    border: 1px solid lightgray;\n    border-radius:2em;\n    min-width:20vw;\n    width:100%;\n    height:100%;\n    position: relative;\n`\n\nconst TitleStyle = styled.h2`\n    position:absolute;\n    top:0;\n    font-size: 4vh;\n    color:black;\n    border:none;\n    background:none;\n    text-decoration: none;\n    padding-left:1em;  \n    font-weight:lighter;\n    text-align:center;\n    margin:0;\n    padding:0;\n`","import styled from 'styled-components';\n\n\n\nconst Title = props => (\n        <TitleStyle>Welcome {props.name}, here are your routes!</TitleStyle>\n    )\nexport default Title\n\n\n//export default connect(mapStateToProps)(Title);\nconst TitleStyle = styled.h2`\n    position:absolute;\n    top:3%;\n    font-size: 2.5em;\n    color:black;\n    border:none;\n    background:none;\n    text-decoration: none;\n    padding-left:1em;  \n    font-weight:lighter;\n    text-align:center;\n    margin:0;\n    padding:0;\n    @media screen and (max-width: 1024px) {\n    {\n        display:none !important;\n    }\n}\n`","import styled from 'styled-components'\nimport gql from 'graphql-tag'\n\nimport React from 'react';\nimport { useState } from 'react';\nimport Router from 'next/router'\nimport { useMutation, useApolloClient } from '@apollo/react-hooks';\n\n\nimport { connect } from 'react-redux';\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Cookies from 'js-cookie'\n\n\n\nconst LogoutButton = (props) => {\n  const client = useApolloClient()\n\n\n  const onCompleted = () => {\n    Router.replace(\"/\")\n    sessionStorage.clear()\n    logout()\n  }\n\n  const onError = error => {\n    // If you want to send error to external service?\n    console.error(error)\n  }\n  const [logout, { error }] = useMutation(gql`\n  mutation Logout {\n    logout\n  }`, {\n    onCompleted,\n    onError,\n  })\n  \n  return (\n    <StyledWrapper onClick={() => {logout()}}>\n    <StyledText>Logout</StyledText>\n    <StyledFontAwesomeIcon icon={faDoorOpen}/>\n  </StyledWrapper>\n\n  )\n}\n\n//const mapStateToProps = state => {\n//    return { cleanUser: state.cleanUser };\n//  };\nexport default LogoutButton\n//  export default connect(mapStateToProps,{cleanUser})(LogoutButton);\n  \n  const StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  font-size:3vh;\n  transform: translate(-50%, 0); \n  `\n\n  const StyledWrapper = styled.div`\n  display:flex;\n  flex-direction:row;\n  width:5vw;\n  height:5vh;\n  position: absolute;\n  right:10vw;\n  top:3vh;\n  `\n  const StyledText = styled.p`\n    font-size:3vh;\n    padding:0;\n    margin:0;\n    margin-right:0.5vw;\n    user-select: none;\n  `","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport cookie from 'cookie'\nimport Head from 'next/head'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport fetch from 'isomorphic-unfetch'\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState, { getToken })\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    // Warn if old way of installing apollo is used\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    }\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx.req)\n        }\n      ))\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {}\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {}\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState\n      }\n    }\n  }\n\n  return WithApollo\n}\n\nlet apolloClient = null\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient (...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    // @ts-ignore\n    return createApolloClient(...args)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // @ts-ignore\n    apolloClient = createApolloClient(...args)\n  }\n\n  return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient (initialState = {}, { getToken }) {\n  const fetchOptions = {agent:\"\"}\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  if (typeof window === 'undefined') {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(\n        process.env.https_proxy\n      )\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:8000/graphql', // Server URL (must be absolute)\n    credentials: 'include',\n    fetch,\n    fetchOptions\n  })\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken()\n    return {\n      headers: {\n        ...headers,\n        cookie: token ? `qid=${token.qid} ` : '',\n        cookie_2:token ? `hid=${token.hid} `: ''\n      }\n    }\n  })\n//hid=${token.hid}\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  })\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken (req) {\n  const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n//  console.log(cookies)\n  return cookies\n}\n\n\n/*import React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\n\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({}))\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  return apolloClient\n}\n\n\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:8000/graphql', // Server URL (must be absolute)\n      credentials: 'include', // Additional fetch() options like `credentials` or `headers`\n      fetch,\n    }),\n    cache: new InMemoryCache().restore(initialState),\n  })\n}\n\n*/","import uuid from 'uuid/v4';\nexport const createComponent =  ({user, type, selectedHtypeId}) => {\n    const idSuffix = type.substring(0,2).toLowerCase() + \"_\"\n    const selectedComponentId = idSuffix + uuid()\n    let componentTemplate;\n    switch(type){\n        case \"HEADLINE\":{\n            componentTemplate = '{\"headline\":\"New Headline\"}'\n        }\n    }\n    return{\n        id: selectedComponentId,\n        onwnerId:user.id,\n        ownerName:user.name,\n        parentId:selectedHtypeId,\n        type: type,\n        content: componentTemplate\n    }\n\n}\n\nexport const createRoute =  ({user, type}) => {\n    const idSuffix = type.substring(0,2).toLowerCase() + \"_\"\n    const routeId = idSuffix + uuid()\n\n    return{\n        id:routeId,\n        onwnerId:user.id,\n        ownerName:user.name,\n        name:\"New Route\",\n        image:\"\",\n        stops:[],\n        pois:[],\n        components:[],\n        locations:[],\n\n    }\n\n}\n\nexport const createStop =  ({user, type}) => {\n    const idSuffix = type.substring(0,2).toLowerCase() + \"_\"\n    const stopId = idSuffix + uuid()\n\n    return{\n        id:stopId,\n        onwnerId:user.id,\n        ownerName:user.name,\n        name:\"New Stop\",\n        image:\"\",\n        pois:[],\n        components:[],\n        locations:\"\",\n    }\n\n}\n\nexport const createPoi =  ({user, type}) => {\n    const idSuffix = type.substring(0,2).toLowerCase() + \"_\"\n    const poiId = idSuffix + uuid()\n\n    return{\n        id:poiId,\n        onwnerId:user.id,\n        ownerName:user.name,\n        name:\"New Poi\",\n        image:\"\",\n        components:[],\n        location:\"\",\n    }\n\n}","import { \n  DATA_LOAD_USER,\n  DATA_LOAD_ROUTE_MGMT_DATA,\n  DATA_LOAD_INPUT_SCREEN,\n  DATA_UPDATE_COMPONENTS_ORDER,\n  DATA_UPDATE_HTYPE_ORDER,\n  DATA_UPDATE_CHILD_HTYPE_ORDER,\n  DATA_UPDATE_COMPONENT,\n  DATA_ADD_NEW_COMPONENT,\n  DATA_EMPTY_SELECTED_COMPONENT_ID,\n  DATA_HANDLE_HTYPE_CHANGE,\n  DATA_SET_SELECTED_COMPONENT,\n  DATA_LOAD_COMPONENTS,\n  DATA_SET_SELECTED_HTYPE,\n  DATA_DELETE_SELECTED_COMPONENT\n} from \"./types\";\n\n\n\nlet dataLoadUserId = 0;\nlet dataLoadRouteMgmtDataId = 0;\nlet dataLoadInputScreenId = 0;\nlet dataLoadComponentsId = 0;\nlet dataUpdateComponentsOrderId = 0;\nlet dataUpdateHtypeOrderId = 0;\nlet dataUpdateChildHtypeOrderId = 0;\nlet dataUpdateComponentId = 0;\nlet dataAddNewComponentId = 0;\nlet dataEmptySelectedComponentId = 0;\nlet dataHandleHtypeNameChangeId = 0;\nlet dataSetSelectedComponentId = 0;\nlet dataSetSelectedHtypeId = 0;\nlet dataDeleteSelectedComponentId = 0;\n\n\nexport const dataLoadUser = content => ({\n  type: DATA_LOAD_USER,\n  payload: {\n    id: ++dataLoadUserId,\n    content,\n  }\n});\n\n\nexport const dataLoadRouteMgmtData = content => ({\n  type: DATA_LOAD_ROUTE_MGMT_DATA,\n  payload: {\n    id: ++dataLoadRouteMgmtDataId,\n    content,\n  }\n});\n\nexport const dataLoadInputScreen = content => ({\n  type: DATA_LOAD_INPUT_SCREEN,\n  payload:{\n    id: ++dataLoadInputScreenId,\n    content,\n  }\n})\n\nexport const dataUpdateComponentsOrder = content => ({\n  type: DATA_UPDATE_COMPONENTS_ORDER,\n  payload:{\n    id: ++dataUpdateComponentsOrderId,\n    content,\n  }\n})\n\nexport const dataUpdateHtypeOrder = content => ({\n  type: DATA_UPDATE_HTYPE_ORDER,\n  payload:{\n    id: ++dataUpdateHtypeOrderId,\n    content,\n  }\n})\n\nexport const dataUpdateChildHtypeOrder = content => ({\n  type:DATA_UPDATE_CHILD_HTYPE_ORDER,\n  payload:{\n    id: ++dataUpdateChildHtypeOrderId,\n    content,\n  }\n})\n\nexport const dataUpdateComponent = content => ({\n  type: DATA_UPDATE_COMPONENT,\n  payload: {\n    id:++dataUpdateComponentId,\n    content,\n  }\n})\n\nexport const dataAddNewComponent = content => ({\n  type: DATA_ADD_NEW_COMPONENT,\n  payload: {\n    id:++dataAddNewComponentId,\n    content,\n  }\n})\nexport const dataEmptySelectedComponent = () => ({\n  type: DATA_EMPTY_SELECTED_COMPONENT_ID,\n  payload:{\n    id:++dataEmptySelectedComponentId,\n  }\n})\n\nexport const dataHandleHtypeChange = content => ({\n  type: DATA_HANDLE_HTYPE_CHANGE,\n  payload: {\n    id:++dataHandleHtypeNameChangeId,\n    content,\n  }\n})\n\nexport const dataSetSelectedComponent = content => ({\n  type: DATA_SET_SELECTED_COMPONENT,\n  payload:{\n    id:++dataSetSelectedComponentId,\n    content,\n  }\n})\n\nexport const dataSetSelectedHtype = content => ({\n  type: DATA_SET_SELECTED_HTYPE,\n  payload:{\n    id:++dataSetSelectedHtypeId,\n    content,\n  }\n})\n\nexport const dataLoadComponents = content => ({\n  type: DATA_LOAD_COMPONENTS,\n  payload:{\n    id:++dataLoadComponentsId,\n    content,\n  }\n})\n\nexport const dataDeleteSelectedComponent = () => ({\n  type: DATA_DELETE_SELECTED_COMPONENT,\n  payload:{\n    id:++dataDeleteSelectedComponentId,\n  }\n})","\n//.---------------------------\n//----Data------\nexport const DATA_LOAD_USER = \"DATA_LOAD_USER\"\nexport const DATA_LOAD_ROUTE_MGMT_DATA = \"DATA_LOAD_ROUTE_MGMT_DATA\"\nexport const DATA_LOAD_INPUT_SCREEN = \"DATA_LOAD_INPUT_SCREEN\"\nexport const DATA_UPDATE_COMPONENTS_ORDER = \"UPDATE_COMPONENTS_ORDER\"\nexport const DATA_UPDATE_HTYPE_ORDER = \"DATA_UPDATE_HTYPE_ORDER\"\nexport const DATA_UPDATE_CHILD_HTYPE_ORDER = \"DATA_UPDATE_CHILD_HTYPE_ORDER\"\nexport const DATA_UPDATE_COMPONENT = \"DATA_UPDATE_COMPONENT\"\nexport const DATA_ADD_NEW_COMPONENT = \"DATA_ADD_NEW_COMPONENT\"\nexport const DATA_EMPTY_SELECTED_COMPONENT_ID = \"DATA_EMPTY_SELECTED_COMPONENT_ID\"\nexport const DATA_HANDLE_HTYPE_CHANGE = \"DATA_HANDLE_HTYPE_CHANGE\"\nexport const DATA_SET_SELECTED_COMPONENT = \"DATA_SET_SELECTED_COMPONENT\"\nexport const DATA_LOAD_COMPONENTS = \"DATA_LOAD_COMPONENTS\"\nexport const DATA_SET_SELECTED_HTYPE = \"DATA_SET_SELECTED_HTYPE\"\nexport const DATA_DELETE_SELECTED_COMPONENT = \"DATA_DELETE_SELECTED_COMPONENT\"\n//-----UI-------\nexport const UI_UPDATE_ROUTEMGMT_STATE = \"UI_UPDATE_ROUTEMGMT_STATE\"\nexport const UI_LOAD_STOP_AND_POI_MANAGER_STATE = \"UI_LOAD_STOP_AND_POI_MANAGER_STATE\"\nexport const UI_UPDATE_INPUT_SCREEN_STATE = \"UI_UPDATE_INPUT_SCREEN_STATE\";\nexport const UI_UPDATE_SIMULATOR_SELECTION_STATE = \"UI_UPDATE_SIMULATOR_SELECTION_STATE\";\nexport const UI_UPDATE_SELECTOR_MANAGER_STATE = \"UI_UPDATE_SELECTOR_MANAGER_STATE\";\nexport const UI_INITIALIZE_INPUT_SCREEN_UI = \"UI_INITIALIZE_INPUT_SCREEN_UI\";\nexport const UI_UPDATE_SIMULATOR_SELECTION = \"UI_UPDATE_SIMULATOR_SELECTION\"\nexport const UI_UPDATE_ROUTE_STATE = \"UI_UPDATE_ROUTE_STATE\";\nexport const UI_STOP_AND_POI_MANAGER_CONTROLLER = \"UI_STOP_AND_POI_MANAGER_CONTROLLER\";\nexport const UI_SET_TITLE = \"UI_SET_TITLE\";\nexport const UI_INITIALIZE_SIMULATOR_STATE = \"UI_INITIALIZE_SIMULATOR_STATE\";\nexport const UI_UPDATE_INPUT_SCREEN_FLAG = \"UI_UPDATE_INPUT_SCREEN_FLAG\"\n","import { \n    UI_UPDATE_ROUTE_STATE,\n    UI_UPDATE_SELECTOR_MANAGER_STATE, \n    UI_INITIALIZE_INPUT_SCREEN_UI, \n    UI_STOP_AND_POI_MANAGER_CONTROLLER,\n    UI_SET_TITLE,\n    UI_INITIALIZE_SIMULATOR_STATE,\n    //---------------\n    UI_UPDATE_ROUTEMGMT_STATE,\n    UI_LOAD_STOP_AND_POI_MANAGER_STATE,\n    UI_UPDATE_INPUT_SCREEN_STATE,\n    UI_UPDATE_SIMULATOR_SELECTION_STATE,\n    UI_UPDATE_INPUT_SCREEN_FLAG\n    \n\n  } from \"./types\";\n  //includes route management actions\n\n\n  let uiUpdateId = 0;\n  let uiUpdateManagerStateId = 0;\n  let uiUpdateInputScreenStateId = 0;\n  let uiInitializeInputScreenUiId = 0;\n  let uiUpdateSimulatorSelectionId = 0;\n  let uiStopAndPoiManagerControllerId = 0;\n  let uiSetTitleId = 0;\n  let uiUpdateRoutemgmtStateId = 0;\n  let uiLoadStopAndPoiManagerStateId = 0;\n  let uiUpdateSimulatorSelectionStateId = 0;\n  let uiInitializeSimulatorStateId = 0;\n  let uiUpdateInputScreenFlagId = 0;\n\n\n  export const uiUpdateOrder = content => ({\n      type: UI_UPDATE_ROUTE_STATE,\n      payload: {\n        id: ++uiUpdateId,\n        content,\n      }\n    });\n  \n  export const uiUpdateSelectorManagerState = content => ({\n      type: UI_UPDATE_SELECTOR_MANAGER_STATE,\n      payload: {\n        id:++uiUpdateManagerStateId,\n        content,\n      }\n  })\n  \n  \n  \n  export const uiInitializeInputScreenUi = content => ({\n    type: UI_INITIALIZE_INPUT_SCREEN_UI,\n    payload: {\n      id:++uiInitializeInputScreenUiId,\n      content,\n    }\n    \n  })\n\n\n\n  export const uiStopAndPoiManagerController = content => ({\n    type: UI_STOP_AND_POI_MANAGER_CONTROLLER,\n    payload: {\n      id:++uiStopAndPoiManagerControllerId,\n      content,\n    }\n  })\n\n  export const uiSetTitle = content => ({\n    type: UI_SET_TITLE,\n    payload: {\n      id:++uiSetTitleId,\n      content,\n    }\n  })\n\n  ///-.--------------\n  export const uiUpdateRoutemgmtState = content => ({\n    type: UI_UPDATE_ROUTEMGMT_STATE,\n    payload: {\n      id:++uiUpdateRoutemgmtStateId,\n      content,\n    }\n  })\n\n  export const uiLoadStopAndPoiManagerState = content => ({\n    type: UI_LOAD_STOP_AND_POI_MANAGER_STATE,\n    payload: {\n      id:++uiLoadStopAndPoiManagerStateId,\n      content,\n    }\n  })\n\n  export const uiUpdateInputScreenState = content => ({\n    type: UI_UPDATE_INPUT_SCREEN_STATE,\n    payload: {\n      id:++uiUpdateInputScreenStateId,\n      content,\n    }\n  })\n\n\n  export const uiUpdateSimulatorSelectionState = content => ({\n    type: UI_UPDATE_SIMULATOR_SELECTION_STATE,\n    payload: {\n      id:++uiUpdateSimulatorSelectionStateId,\n      content,\n    }\n  })\n\n  export const uiInitializeSimulatorState = content => ({\n    type:UI_INITIALIZE_SIMULATOR_STATE,\n    payload:{\n      id:++uiInitializeSimulatorStateId,\n      content,\n    }\n  })\n\n  export const uiUpdateInputScreenFlag = () => ({\n    type:UI_UPDATE_INPUT_SCREEN_FLAG,\n    payload:{\n      id:++uiUpdateInputScreenFlagId\n    }\n  })","import Link from 'next/link';\nimport styled from 'styled-components';\nimport dynamic from 'next/dynamic';\nimport Title from '../components/route-management/title'\nimport RouteManagementStateManager from '../components/route-management/stateManager';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withApollo } from '../lib/apollo';\nimport React, { useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { dataLoadUser, dataLoadRouteMgmtData } from '../lib/redux/actions/dataActions';\nimport { UiState, DataState } from '../types/reduxTypes';\nimport Router from 'next/router';\nimport { GrayRotatingSpinner } from '../components/loading-component/rotatingSpinner';\nimport LogoutButton from '../components/shared-components/logoutButton';\n\n\nconst RouteManagement = (props) => {\n    const dispatch = useDispatch();\n    const dataState = useSelector((state: DataState) => state.data);\n    const [dispatchSent, setDispatchSent,] = useState(false)\n    const { loading, error, data } = useQuery(\n        gql`query getHtypes \n    {   \n        getRoutes{id ownerid name components stops pois}\n        getPois{id ownerid name components}\n        getStops{id ownerid name components pois}\n        me{id name email routes pois stops}\n    }`)\n\n    useEffect(() => {\n        // console.log(data)\n        //   console.log(error)\n        if (!loading) {\n            let htype;\n            if (!data || !data.me.id) {\n                Router.replace(\"/\")\n                return\n            }\n            const htypes = {\n                routes:data.getRoutes,\n                stops:data.getStops,\n                pois:data.getPois\n            }\n            dispatch(dataLoadRouteMgmtData({htypes:htypes, user:data.me}))\n            setDispatchSent(true)\n        }\n    }, [loading])\n\n\n    return (\n        !dispatchSent?\n        <GrayRotatingSpinner/>:\n        <Container>\n            <Images>\n                <HeaderImage src=\"/logo_fible.png\" alt=\"my image\"></HeaderImage>\n            </Images>\n            <Title name={dataState.user.name}/>\n            <LogoutButton/>\n            <RouteManagementStateManager/>      \n        </Container>\n    )\n};\n//                <Link href=\"/\">\n//<BackImage src=\"/back.svg\"></BackImage>\n//</Link>\nexport default dynamic(() => Promise.resolve(withApollo(RouteManagement)), {\n    ssr: false\n})\n\n\nconst Images = styled.div`\n    height:8em;\n    margin:0;\n    padding-left:1em;\n    position:absolute;\n    top:1%;\n    left:0%;\n\n`\n\n\nconst HeaderImage = styled.img`\n    height:4em;\n    width:7em;\n    padding-left:2em;\n    padding-top:1em;\n    padding-bottom:2em;\n    position: absolute;\n    margin:0;\n    z-index:1;\n\n`\nconst BackImage = styled.img`\n    padding-top:0.5em;\n    height:2em;\n    width:2em;\n    z-index:1;\n    position: absolute;\n`\n\n\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vh;\n    margin:0;\n    padding:0;\n    background:white;\n    display:flex;\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    align-content:center;\n    justify-content:center;\n`\n","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@apollo/react-ssr\");","module.exports = require(\"@fortawesome/free-solid-svg-icons\");","module.exports = require(\"@fortawesome/react-fontawesome\");","module.exports = require(\"apollo-cache-inmemory\");","module.exports = require(\"apollo-client\");","module.exports = require(\"apollo-link-context\");","module.exports = require(\"apollo-link-http\");","module.exports = require(\"cookie\");","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"https-proxy-agent\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/dynamic\");","module.exports = require(\"next/head\");","module.exports = require(\"next/router\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-beautiful-dnd\");","module.exports = require(\"react-redux\");","module.exports = require(\"react-spinners-kit\");","module.exports = require(\"styled-components\");","module.exports = require(\"uuid/v4\");"],"mappingsrGA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;;;;;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA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AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AADA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAHA;AADA;AAOA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AADA;AAFA;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AADA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AADA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACtGA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}