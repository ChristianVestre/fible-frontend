{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/christian/Development/fible-frontend-nextjs/src/components/route-management/selector.tsx\";\nvar __jsx = React.createElement;\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport React from 'react';\nimport Column from './column';\nimport { connect } from 'react-redux';\nimport { updateOrder, updateSelectorManagerState } from '../../redux/actions/uiActions';\n\nclass Selector extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId == source.droppableId && destination.index == source.index) {\n        return;\n      }\n\n      const columnId = source.droppableId;\n      const column = this.props.uiState.columns[source.droppableId];\n\n      const newOrder = _Array$from(column.ids);\n\n      newOrder.splice(source.index, 1);\n      newOrder.splice(destination.index, 0, draggableId);\n      this.props.updateOrder({\n        newOrder,\n        columnId\n      });\n    });\n\n    _defineProperty(this, \"selectorFunction\", () => {\n      //fix reordering problem\n      switch (this.props.type) {\n        case \"ROUTES\":\n          {\n            const columnId = \"column-1\";\n            const column = this.props.uiState.columns[columnId];\n            const routes = column.ids.map(routeId => this.props.uiState.routes[routeId]);\n            return __jsx(Column, {\n              key: columnId,\n              column: column,\n              type: \"ROUTES\",\n              listItems: routes,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40\n              },\n              __self: this\n            });\n          }\n\n        case \"STOPS\":\n          {\n            const columnId = \"column-2\";\n            const column = this.props.uiState.columns[columnId];\n            const stops = column.ids.map(stopId => this.props.uiState.stops[stopId]);\n            return __jsx(Column, {\n              key: columnId,\n              column: column,\n              type: \"STOPS\",\n              listItems: stops,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            });\n          }\n\n        case \"POIS\":\n          {\n            const columnId = \"column-3\";\n            const column = this.props.uiState.columns[columnId];\n            let pois = [];\n            column.ids.length > 0 ? pois = column.ids.map(poiId => this.props.uiState.pois[poiId]) : pois = [];\n            return __jsx(Column, {\n              key: columnId,\n              column: column,\n              type: \"POIS\",\n              listItems: pois,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55\n              },\n              __self: this\n            });\n          }\n\n        default:\n          return __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"wrong\");\n      }\n    });\n  }\n\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.selectorFunction());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectorState: state.selector,\n    uiState: state.ui,\n    updateOrder: state.updateOrder\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateOrder,\n  updateSelectorManagerState\n})(Selector);","map":{"version":3,"sources":["/home/christian/Development/fible-frontend-nextjs/src/components/route-management/selector.tsx"],"names":["DragDropContext","React","Column","connect","updateOrder","updateSelectorManagerState","Selector","Component","result","destination","source","draggableId","droppableId","index","columnId","column","props","uiState","columns","newOrder","ids","splice","type","routes","map","routeId","stops","stopId","pois","length","poiId","render","onDragEnd","selectorFunction","mapStateToProps","state","selectorState","selector","ui"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport React from 'react';\nimport Column from './column';\nimport { connect } from 'react-redux';\nimport { updateOrder, updateSelectorManagerState } from '../../redux/actions/uiActions'\n\n\n\nclass Selector extends React.Component<{ uiState: any,selectorState:any, type: string, updateOrder: Function }> {\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId == source.droppableId &&\n            destination.index == source.index) {\n            return;\n        }\n        const columnId = source.droppableId;\n        const column = this.props.uiState.columns[source.droppableId]\n        const newOrder = Array.from(column.ids);\n\n        newOrder.splice(source.index, 1);\n        newOrder.splice(destination.index, 0, draggableId);\n\n        this.props.updateOrder({ newOrder, columnId })\n    }\n\n\n    selectorFunction = () => {\n        //fix reordering problem\n        switch (this.props.type) {\n            case (\"ROUTES\"): {\n                const columnId = \"column-1\";\n                const column = this.props.uiState.columns[columnId];\n                const routes = column.ids.map((routeId) => this.props.uiState.routes[routeId])\n                return <Column key={columnId} column={column} type=\"ROUTES\" listItems={routes} />;\n            }\n            case (\"STOPS\"):{\n                const columnId = \"column-2\";\n                const column = this.props.uiState.columns[columnId];\n                const stops = column.ids.map((stopId) => this.props.uiState.stops[stopId])\n                return <Column key={columnId} column={column} type=\"STOPS\" listItems={stops} />;\n            }\n            case (\"POIS\"): {\n                const columnId = \"column-3\";\n                const column = this.props.uiState.columns[columnId];\n                let pois = []\n                column.ids.length>0 ?\n                pois = column.ids.map((poiId) => this.props.uiState.pois[poiId]) :\n                pois = [];\n                return <Column key={columnId} column={column} type=\"POIS\" listItems={pois} />;\n            }\n            default:\n                return <p>wrong</p>\n        }\n    }\n    render() {\n        return <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.selectorFunction()}\n        </DragDropContext>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return { selectorState: state.selector, uiState:state.ui, updateOrder: state.updateOrder };\n};\n\nexport default connect(mapStateToProps, { updateOrder, updateSelectorManagerState })(Selector);\n\n"]},"metadata":{},"sourceType":"module"}