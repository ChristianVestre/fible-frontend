{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { UPDATE_COMPONENTS_ORDER, HEADLINE, INITIALIZE_HTYPE, DELETE_HTYPE, EMPTY_SELECTED_COMPONENT_ID, SET_SELECTED_COMPONENT } from \"../actions/types\";\nimport nanoid from \"nanoid\"; //HTYPE is the hierarchy type, aka route, stop, etc\n//DATA REDUCER + UI REDUCER + ROUTE MANAGEMENT SCREEN REDUCER\n\nvar initialState = {\n  user: {\n    name: \"Christian\",\n    ROUTES: [],\n    STOPS: [],\n    POIS: [],\n    email: \"\"\n  },\n  //the id of the hcomponent being worked on\n  selectedHtypeId: \"\",\n  selectedComponentId: \"empty\",\n  ROUTES: {},\n  STOPS: {},\n  POIS: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INITIALIZE_HTYPE:\n      {\n        //     const selectedDispatch = action.payload.content.dispatch;\n        var htype = action.payload.content.htype;\n        var htypeid = htype.substring(0, 2) + \"_\" + nanoid(8);\n        return _objectSpread({}, state, _defineProperty({\n          user: _objectSpread({}, state.user, _defineProperty({}, htype, [].concat(_toConsumableArray(state.user[htype]), [htypeid]))),\n          selectedHtypeId: htypeid\n        }, htype, _objectSpread({}, state[htype], _defineProperty({}, htypeid, {\n          //take the name of the account owner\n          owner: state.user.name,\n          //name to be filled out when the route is finished\n          name: \"\",\n          order: [],\n          components: {}\n        }))));\n      }\n\n    case EMPTY_SELECTED_COMPONENT_ID:\n      {\n        return _objectSpread({}, state, {\n          selectedComponentId: \"empty\"\n        });\n      }\n\n    case DELETE_HTYPE:\n      {\n        var _htype = action.payload.content.htype;\n        var _htypeid = action.payload.content.htypeid;\n        delete state[_htype.toLowerCase()][_htypeid];\n\n        var index = state.user[_htype].indexOf(_htypeid);\n\n        delete state.user[_htype][index];\n        return state;\n      }\n\n    /*   case FINISH_HTYPE: {\n           const selectedDispatch = action.payload.content.dispatch;\n           const id = action.payload.content.id\n           const htype = action.payload.content.dispatch;\n           return {\n               ...state,\n                       [htype.toLowerCase()]:{\n                       ...state.data[htype.toLowerCase()],\n                       //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                       [htype.toLowerCase().substring(0, 2) + \"_\" + nanoid(8)]:{\n                           //take the name of the account owner\n                           owner:state.data.user.name,\n                           //name to be filled out when the route is finished\n                           name:\"\"\n                           //location of stops?\n                           //pois that belong?\n                           \n                   }\n               }\n           };\n       },\n    */\n\n    case HEADLINE:\n      {\n        var headline = action.payload.content.headline;\n        var _htype2 = action.payload.content.type;\n        var _htypeid2 = action.payload.content.selectedHtypeId;\n        var dispatch = action.payload.content.dispatch;\n\n        switch (dispatch) {\n          case \"ADD_HEADLINE\":\n            {\n              //create the id because it has not been changed before\n              var headlineId = \"HL_\" + nanoid(8); //rebuilding the state object to add new data\n\n              console.log(state);\n              return _objectSpread({}, state, _defineProperty({\n                selectedComponentId: headlineId\n              }, _htype2, _objectSpread({}, state[_htype2], _defineProperty({}, _htypeid2, _objectSpread({}, state[_htype2][_htypeid2], {\n                order: [].concat(_toConsumableArray(state[_htype2][_htypeid2].order), [headlineId]),\n                components: _objectSpread({}, state[_htype2][_htypeid2].components, _defineProperty({}, headlineId, {\n                  id: headlineId,\n                  type: \"HEADLINE\",\n                  headline: headline\n                }))\n              })))));\n            }\n          //case where you want to change the headline but it already exists\n\n          case \"UPDATE_HEADLINE\":\n            {\n              var _headlineId = action.payload.content.selectedComponentId;\n              return _objectSpread({}, state, _defineProperty({}, _htype2, _objectSpread({}, state[_htype2], _defineProperty({}, _htypeid2, _objectSpread({}, state[_htype2][_htypeid2], {\n                components: _objectSpread({}, state[_htype2][_htypeid2].components, _defineProperty({}, _headlineId, {\n                  id: _headlineId,\n                  type: \"HEADLINE\",\n                  headline: headline\n                }))\n              })))));\n            }\n        }\n      }\n\n    case UPDATE_COMPONENTS_ORDER:\n      {\n        var newOrder = action.payload.content.newOrder;\n        var _htype3 = action.payload.content.htype;\n        var htypeId = action.payload.content.htypeId;\n        return _objectSpread({}, state, _defineProperty({}, _htype3, _objectSpread({}, state[_htype3], _defineProperty({}, htypeId, _objectSpread({}, state[_htype3][htypeId], {\n          order: newOrder\n        })))));\n      }\n      ;\n\n    case SET_SELECTED_COMPONENT:\n      {\n        var selectedId = action.payload.content.selectedComponentId;\n        return _objectSpread({}, state, {\n          selectedComponentId: selectedId\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n/*\n        case HEADLINE: {\n            const headline = action.payload.content.headline\n            const htype = action.payload.content.type\n            const routeId = action.payload.content.routeId\n            switch(dispatch){\n                case(\"ADD_HEADLINE\"):{\n                //create the id because it has not been changed before\n                const headlineId = htype.toLowerCase().substring(0, 2) + \"_\" + nanoid(8)\n                //rebuilding the state object to add new data\n                return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        order:[...state.data.route[routeId].order, headlineId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            [headlineId]:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                //case where you want to change the headline but it already exists\n                case(\"UPDATE_HEADLINE\"):{\n                    const headlineId = action.payload.content.headlineId\n                    return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            []:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n\n        */","map":{"version":3,"sources":["/home/christian/Development/fible-frontend-nextjs/src/redux/reducers/dataReducer.ts"],"names":["UPDATE_COMPONENTS_ORDER","HEADLINE","INITIALIZE_HTYPE","DELETE_HTYPE","EMPTY_SELECTED_COMPONENT_ID","SET_SELECTED_COMPONENT","nanoid","initialState","user","name","ROUTES","STOPS","POIS","email","selectedHtypeId","selectedComponentId","state","action","type","htype","payload","content","htypeid","substring","owner","order","components","toLowerCase","index","indexOf","headline","dispatch","headlineId","console","log","id","newOrder","htypeId","selectedId"],"mappings":"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","sourcesContent":["import { UPDATE_INPUT_SCREEN_UI, UPDATE_COMPONENTS_ORDER , HEADLINE, INITIALIZE_HTYPE, DELETE_HTYPE, EMPTY_SELECTED_COMPONENT_ID, SET_SELECTED_COMPONENT } from \"../actions/types\";\nimport {updateSimulatorSelection} from '../actions/uiActions'\nimport nanoid from \"nanoid\";\n\n//HTYPE is the hierarchy type, aka route, stop, etc\n//DATA REDUCER + UI REDUCER + ROUTE MANAGEMENT SCREEN REDUCER\nconst initialState = {\n\n\n    user: {\n        name: \"Christian\",\n        ROUTES: [],\n        STOPS: [],\n        POIS: [],\n        email: \"\",\n    },\n    //the id of the hcomponent being worked on\n    selectedHtypeId: \"\",\n    selectedComponentId: \"empty\",\n    ROUTES: {},\n    STOPS: {},\n    POIS: {},\n\n}\n\n\n\nexport default function (state = initialState, action) {\n\n    switch (action.type) {\n        case INITIALIZE_HTYPE: {\n            //     const selectedDispatch = action.payload.content.dispatch;\n            const htype = action.payload.content.htype;\n            const htypeid = htype.substring(0, 2) + \"_\" + nanoid(8);\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    [htype]: [...state.user[htype], htypeid]\n                },\n                selectedHtypeId: htypeid,\n                [htype]: {\n                    ...state[htype],\n                    //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                    [htypeid]: {\n                        //take the name of the account owner\n                        owner: state.user.name,\n                        //name to be filled out when the route is finished\n                        name: \"\",\n                        order: [],\n                        components: {},\n\n                    }\n                }\n            };\n        }\n        case EMPTY_SELECTED_COMPONENT_ID: {\n            return {\n                ...state,\n                selectedComponentId: \"empty\",\n            }\n        }\n        case DELETE_HTYPE: {\n            const htype = action.payload.content.htype;\n            const htypeid = action.payload.content.htypeid;\n            delete state[htype.toLowerCase()][htypeid]\n            const index = state.user[htype].indexOf(htypeid);\n            delete state.user[htype][index]\n            return state\n        }\n        /*   case FINISH_HTYPE: {\n               const selectedDispatch = action.payload.content.dispatch;\n               const id = action.payload.content.id\n               const htype = action.payload.content.dispatch;\n               return {\n                   ...state,\n   \n                       [htype.toLowerCase()]:{\n                           ...state.data[htype.toLowerCase()],\n                           //taking the first two letters of the hierarchy type and combining it with a unique id of length 8\n                           [htype.toLowerCase().substring(0, 2) + \"_\" + nanoid(8)]:{\n                               //take the name of the account owner\n                               owner:state.data.user.name,\n                               //name to be filled out when the route is finished\n                               name:\"\"\n                               //location of stops?\n                               //pois that belong?\n   \n                           \n                       }\n                   }\n               };\n           },\n   */\n\n        case HEADLINE: {\n            const headline = action.payload.content.headline\n            const htype = action.payload.content.type\n            const htypeid = action.payload.content.selectedHtypeId\n            const dispatch = action.payload.content.dispatch\n            switch (dispatch) {\n                case (\"ADD_HEADLINE\"): {\n                    //create the id because it has not been changed before\n                    const headlineId = \"HL_\" + nanoid(8)\n                    //rebuilding the state object to add new data\n                    console.log(state)\n                    return {\n                        ...state,\n                        selectedComponentId: headlineId,\n                        [htype]: {\n                            ...state[htype],\n                            [htypeid]: {\n                                ...state[htype][htypeid],\n                                order: [...state[htype][htypeid].order, headlineId],\n                                components: {\n                                    ...state[htype][htypeid].components,\n                                    [headlineId]: {\n                                        id: headlineId,\n                                        type: \"HEADLINE\",\n                                        headline: headline\n\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                //case where you want to change the headline but it already exists\n                case (\"UPDATE_HEADLINE\"): {\n                    const headlineId = action.payload.content.selectedComponentId\n                    return {\n                        ...state,\n                        [htype]: {\n                            ...state[htype],\n                            [htypeid]: {\n                                ...state[htype][htypeid],\n                                components: {\n                                    ...state[htype][htypeid].components,\n                                    [headlineId]: {\n                                        id: headlineId,\n                                        type: \"HEADLINE\",\n                                        headline: headline\n                                    }\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n        case (UPDATE_COMPONENTS_ORDER): {\n            const newOrder = action.payload.content.newOrder\n            const htype = action.payload.content.htype\n            const htypeId = action.payload.content.htypeId\n            return {\n                ...state,\n                [htype]: {\n                    ...state[htype],\n                    [htypeId]: {\n                        ...state[htype][htypeId],\n                        order: newOrder,\n                    }\n                }\n            }\n        };\n        case (SET_SELECTED_COMPONENT): {\n            const selectedId = action.payload.content.selectedComponentId\n            return {\n                ...state,\n                selectedComponentId: selectedId,\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n/*\n        case HEADLINE: {\n            const headline = action.payload.content.headline\n            const htype = action.payload.content.type\n            const routeId = action.payload.content.routeId\n            switch(dispatch){\n                case(\"ADD_HEADLINE\"):{\n                //create the id because it has not been changed before\n                const headlineId = htype.toLowerCase().substring(0, 2) + \"_\" + nanoid(8)\n                //rebuilding the state object to add new data\n                return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        order:[...state.data.route[routeId].order, headlineId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            [headlineId]:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                //case where you want to change the headline but it already exists\n                case(\"UPDATE_HEADLINE\"):{\n                    const headlineId = action.payload.content.headlineId\n                    return {\n                    ...state,\n                        data: {\n                            ...state.data,\n                                [htype.toLowerCase()]:{\n                                    ...state.data.route,\n                                    [routeId]:{\n                                        ...state.data.route[routeId]\n                                        components:{\n                                            ...state.data.route[routeId].components\n                                            []:{\n                                                type:\"HEADLINE\"\n                                                headline:headline\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n\n        */"]},"metadata":{},"sourceType":"module"}