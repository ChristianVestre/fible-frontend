{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/christian/Development/fible-frontend-nextjs/src/components/route-management/route.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from \"react-redux\";\nimport { removeRoute, updateSelectorManagerState } from '../../redux/actions/uiActions';\n\nclass FibleRoute extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleRemoveRoutes\", e => {\n      //prevent select state update aswell\n      e.stopPropagation();\n      var itemId = this.props.itemData.id; //for removing columns when deleting list items\n\n      var dispatch = this.props.type == \"STOPS\" ? \"STOP_DESELECT\" : dispatch = \"ROUTE_DESELECT\";\n      var removeIndex = this.props.index;\n      var removeColumn = this.props.columnId;\n      this.props.removeRoute({\n        removeIndex,\n        removeColumn\n      });\n      this.props.updateSelectorManagerState({\n        itemId,\n        dispatch\n      });\n    });\n\n    _defineProperty(this, \"handleSelectorManagerStateUpdate\", () => {\n      var itemId = this.props.itemData.id;\n      var dispatch = \"\";\n\n      switch (this.props.type) {\n        case \"ROUTES\":\n          {\n            if (itemId == this.props.selectorState[\"ROUTES\"].id) {\n              dispatch = \"ROUTE_DESELECT\"; /// borderColor = \"lightgray\"\n            } else {\n              dispatch = \"ROUTE_SELECT\"; //  borderColor = \"salmon\"\n            }\n\n            break;\n          }\n\n        case \"STOPS\":\n          {\n            if (this.props.itemData.id == this.props.selectorState[\"STOPS\"].id) {\n              dispatch = \"STOP_DESELECT\"; //       borderColor = \"lightgray\"\n            } else {\n              dispatch = \"STOP_SELECT\"; //     borderColor = \"salmon\"  \n            }\n\n            break;\n          }\n\n        default:\n          {\n            dispatch = \"ROUTE_SELECT\";\n          }\n      }\n\n      this.props.updateSelectorManagerState({\n        itemId,\n        dispatch\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Draggable, {\n      draggableId: this.props.itemData.id,\n      index: this.props.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, provided => __jsx(Container, _extends({}, provided.draggableProps, provided.dragHandleProps, {\n      ref: provided.innerRef,\n      onClick: this.handleSelectorManagerStateUpdate,\n      color: this.props.itemData.id == this.props.selectorState[this.props.type].id ? \"salmon\" : \"lightgray\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), __jsx(Headline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.props.itemData.headline), __jsx(RemoveButton, {\n      onClick: this.handleRemoveRoutes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(FontAwesomeIcon, {\n      icon: faTimes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectorState: state.selector,\n    updateSelectorManagerState: state.updateSelectorManagerState\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeRoute,\n  updateSelectorManagerState\n})(FibleRoute);\nconst Container = styled.div.withConfig({\n  displayName: \"route__Container\",\n  componentId: \"sc-12vgdg3-0\"\n})([\"border:1px solid;border-color:\", \";border-radius:2em;height:8vh;padding:8px;margin-bottom:1em;background-color:white;:hover{border-color:rgba(250,128,114,0.3 );}\"], props => props.color);\nconst Headline = styled.h3.withConfig({\n  displayName: \"route__Headline\",\n  componentId: \"sc-12vgdg3-1\"\n})([\"font-size:2vh;font-weight:lighter;position:relative;user-select:none;top:10%;left:20%;margin:0;color:black;border:none;background:none;text-decoration:none;\"]);\nconst RemoveButton = styled.button.withConfig({\n  displayName: \"route__RemoveButton\",\n  componentId: \"sc-12vgdg3-2\"\n})([\"position:relative;bottom:2vh;left:95%;margin-right:3vw;font-size:2vh;border:0;color:none;background-color:transparent;:focus{outline:none;}\"]);","map":{"version":3,"sources":["/home/christian/Development/fible-frontend-nextjs/src/components/route-management/route.tsx"],"names":["React","styled","Draggable","FontAwesomeIcon","faTimes","connect","removeRoute","updateSelectorManagerState","FibleRoute","Component","e","stopPropagation","itemId","props","itemData","id","dispatch","type","removeIndex","index","removeColumn","columnId","selectorState","render","provided","draggableProps","dragHandleProps","innerRef","handleSelectorManagerStateUpdate","headline","handleRemoveRoutes","mapStateToProps","state","selector","Container","div","color","Headline","h3","RemoveButton","button"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { connect } from \"react-redux\";\nimport {removeRoute, updateSelectorManagerState } from '../../redux/actions/uiActions';\n\n\n\n\n\nclass FibleRoute extends React.Component<{itemData:any,type:any, index:any, removeRoute:any, columnId:string,updateSelectorManagerState:Function,selectorState:any}> {\n\n      \n    \n      handleRemoveRoutes = (e) => {\n        //prevent select state update aswell\n        e.stopPropagation()\n        var itemId = this.props.itemData.id\n        //for removing columns when deleting list items\n        var dispatch = this.props.type == \"STOPS\" ? \"STOP_DESELECT\" : dispatch = \"ROUTE_DESELECT\"\n        var removeIndex = this.props.index;\n        var removeColumn = this.props.columnId;\n        this.props.removeRoute({removeIndex,removeColumn});\n        this.props.updateSelectorManagerState({itemId,dispatch})\n      };\n\n      handleSelectorManagerStateUpdate = () => {\n        var itemId = this.props.itemData.id\n        var dispatch = \"\"\n        switch (this.props.type){\n            case(\"ROUTES\"):{ \n                if(itemId == this.props.selectorState[\"ROUTES\"].id){\n                dispatch = \"ROUTE_DESELECT\"\n               /// borderColor = \"lightgray\"\n                }else{\n                dispatch = \"ROUTE_SELECT\"\n              //  borderColor = \"salmon\"\n                }\n                break\n            }\n            case(\"STOPS\"):{\n            if(this.props.itemData.id == this.props.selectorState[\"STOPS\"].id){\n                dispatch = \"STOP_DESELECT\"\n         //       borderColor = \"lightgray\"\n                }else{\n                dispatch = \"STOP_SELECT\"\n           //     borderColor = \"salmon\"  \n                }\n                break\n            }\n            default:{\n                dispatch = \"ROUTE_SELECT\"\n            }\n            \n        }\n        this.props.updateSelectorManagerState({itemId,dispatch})\n        \n      }\n\n      \n    \n    render(){\n\n        return(\n        <Draggable draggableId={this.props.itemData.id} index={this.props.index}>\n            {provided =>( \n            <Container\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                onClick={this.handleSelectorManagerStateUpdate}\n                color={this.props.itemData.id == this.props.selectorState[this.props.type].id ? \"salmon\":\"lightgray\" }\n                >\n                <Headline>{this.props.itemData.headline}</Headline>\n                <RemoveButton onClick={this.handleRemoveRoutes} >\n                    <FontAwesomeIcon icon={faTimes}/>\n                </RemoveButton>\n            </Container>\n            )\n            }\n        </Draggable>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectorState:state.selector ,updateSelectorManagerState:state.updateSelectorManagerState};\n  };\n\n\n\nexport default connect(mapStateToProps,{ removeRoute, updateSelectorManagerState })(FibleRoute);\n\nconst Container = styled.div`\n    border: 1px solid;\n    border-color: ${props => props.color};\n    border-radius:2em;\n    height:8vh;\n    padding: 8px;\n    margin-bottom:1em;\n    background-color:white;\n    :hover {\n        border-color:rgba(250,128,114 ,0.3 );\n    }\n\n`\n\n\nconst Headline = styled.h3`\n    font-size: 2vh;\n    font-weight:lighter;\n    position:relative;\n    user-select:none;\n    top:10%;\n    left:20%;\n    margin:0;\n    color:black;\n    border:none;\n    background:none;\n    text-decoration: none;   \n`\n\nconst RemoveButton = styled.button`\n    position:relative;\n    bottom:2vh;\n    left:95%;\n    margin-right:3vw;\n    font-size:2vh;\n    border:0;\n    color:none;\n    background-color:transparent;\n\n    :focus {\n        outline:none;\n    }\n\n    \n`\n"]},"metadata":{},"sourceType":"module"}